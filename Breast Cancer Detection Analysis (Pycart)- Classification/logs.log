2024-05-16 08:41:47,322:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2024-05-16 08:41:47,323:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2024-05-16 08:41:47,323:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2024-05-16 08:41:47,323:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2024-05-16 09:11:01,377:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2024-05-16 09:11:01,378:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2024-05-16 09:11:01,378:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2024-05-16 09:11:01,378:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2024-05-16 10:10:35,179:INFO:PyCaret ClassificationExperiment
2024-05-16 10:10:35,179:INFO:Logging name: clf-default-name
2024-05-16 10:10:35,179:INFO:ML Usecase: MLUsecase.CLASSIFICATION
2024-05-16 10:10:35,180:INFO:version 3.3.2
2024-05-16 10:10:35,180:INFO:Initializing setup()
2024-05-16 10:10:35,180:INFO:self.USI: 50d0
2024-05-16 10:10:35,180:INFO:self._variable_keys: {'html_param', 'fold_generator', 'exp_id', 'gpu_param', 'X_train', 'log_plots_param', 'data', 'fold_shuffle_param', '_ml_usecase', 'seed', 'logging_param', 'pipeline', 'memory', 'target_param', 'y_test', '_available_plots', 'gpu_n_jobs_param', 'X', 'y', 'X_test', 'is_multiclass', 'y_train', 'idx', 'fix_imbalance', 'fold_groups_param', 'USI', 'exp_name_log', 'n_jobs_param'}
2024-05-16 10:10:35,180:INFO:Checking environment
2024-05-16 10:10:35,180:INFO:python_version: 3.11.7
2024-05-16 10:10:35,180:INFO:python_build: ('main', 'Dec 15 2023 18:05:47')
2024-05-16 10:10:35,180:INFO:machine: AMD64
2024-05-16 10:10:35,180:INFO:platform: Windows-10-10.0.22631-SP0
2024-05-16 10:10:35,181:INFO:Memory: svmem(total=8259358720, available=1459085312, percent=82.3, used=6800273408, free=1459085312)
2024-05-16 10:10:35,181:INFO:Physical Core: 6
2024-05-16 10:10:35,182:INFO:Logical Core: 8
2024-05-16 10:10:35,183:INFO:Checking libraries
2024-05-16 10:10:35,183:INFO:System:
2024-05-16 10:10:35,184:INFO:    python: 3.11.7 | packaged by Anaconda, Inc. | (main, Dec 15 2023, 18:05:47) [MSC v.1916 64 bit (AMD64)]
2024-05-16 10:10:35,184:INFO:executable: C:\Users\kpaps\anaconda3\python.exe
2024-05-16 10:10:35,184:INFO:   machine: Windows-10-10.0.22631-SP0
2024-05-16 10:10:35,184:INFO:PyCaret required dependencies:
2024-05-16 10:10:39,442:INFO:                 pip: 23.3.1
2024-05-16 10:10:39,442:INFO:          setuptools: 68.2.2
2024-05-16 10:10:39,442:INFO:             pycaret: 3.3.2
2024-05-16 10:10:39,442:INFO:             IPython: 8.20.0
2024-05-16 10:10:39,442:INFO:          ipywidgets: 7.6.5
2024-05-16 10:10:39,442:INFO:                tqdm: 4.65.0
2024-05-16 10:10:39,443:INFO:               numpy: 1.26.4
2024-05-16 10:10:39,443:INFO:              pandas: 2.1.4
2024-05-16 10:10:39,443:INFO:              jinja2: 3.1.3
2024-05-16 10:10:39,443:INFO:               scipy: 1.11.4
2024-05-16 10:10:39,443:INFO:              joblib: 1.2.0
2024-05-16 10:10:39,443:INFO:             sklearn: 1.4.2
2024-05-16 10:10:39,443:INFO:                pyod: 1.1.3
2024-05-16 10:10:39,443:INFO:            imblearn: 0.12.2
2024-05-16 10:10:39,443:INFO:   category_encoders: 2.6.3
2024-05-16 10:10:39,443:INFO:            lightgbm: 4.3.0
2024-05-16 10:10:39,443:INFO:               numba: 0.59.0
2024-05-16 10:10:39,443:INFO:            requests: 2.31.0
2024-05-16 10:10:39,443:INFO:          matplotlib: 3.7.5
2024-05-16 10:10:39,444:INFO:          scikitplot: 0.3.7
2024-05-16 10:10:39,444:INFO:         yellowbrick: 1.5
2024-05-16 10:10:39,444:INFO:              plotly: 5.22.0
2024-05-16 10:10:39,444:INFO:    plotly-resampler: Not installed
2024-05-16 10:10:39,444:INFO:             kaleido: 0.2.1
2024-05-16 10:10:39,444:INFO:           schemdraw: 0.15
2024-05-16 10:10:39,444:INFO:         statsmodels: 0.14.0
2024-05-16 10:10:39,444:INFO:              sktime: 0.26.0
2024-05-16 10:10:39,444:INFO:               tbats: 1.1.3
2024-05-16 10:10:39,444:INFO:            pmdarima: 2.0.4
2024-05-16 10:10:39,444:INFO:              psutil: 5.9.0
2024-05-16 10:10:39,445:INFO:          markupsafe: 2.1.3
2024-05-16 10:10:39,445:INFO:             pickle5: Not installed
2024-05-16 10:10:39,445:INFO:         cloudpickle: 2.2.1
2024-05-16 10:10:39,445:INFO:         deprecation: 2.1.0
2024-05-16 10:10:39,445:INFO:              xxhash: 3.4.1
2024-05-16 10:10:39,445:INFO:           wurlitzer: Not installed
2024-05-16 10:10:39,445:INFO:PyCaret optional dependencies:
2024-05-16 10:10:39,611:INFO:                shap: Not installed
2024-05-16 10:10:39,612:INFO:           interpret: Not installed
2024-05-16 10:10:39,612:INFO:                umap: Not installed
2024-05-16 10:10:39,612:INFO:     ydata_profiling: Not installed
2024-05-16 10:10:39,612:INFO:  explainerdashboard: Not installed
2024-05-16 10:10:39,612:INFO:             autoviz: Not installed
2024-05-16 10:10:39,612:INFO:           fairlearn: Not installed
2024-05-16 10:10:39,612:INFO:          deepchecks: Not installed
2024-05-16 10:10:39,613:INFO:             xgboost: 2.0.3
2024-05-16 10:10:39,613:INFO:            catboost: Not installed
2024-05-16 10:10:39,613:INFO:              kmodes: Not installed
2024-05-16 10:10:39,613:INFO:             mlxtend: Not installed
2024-05-16 10:10:39,613:INFO:       statsforecast: Not installed
2024-05-16 10:10:39,613:INFO:        tune_sklearn: Not installed
2024-05-16 10:10:39,613:INFO:                 ray: Not installed
2024-05-16 10:10:39,613:INFO:            hyperopt: Not installed
2024-05-16 10:10:39,614:INFO:              optuna: Not installed
2024-05-16 10:10:39,614:INFO:               skopt: Not installed
2024-05-16 10:10:39,614:INFO:              mlflow: Not installed
2024-05-16 10:10:39,614:INFO:              gradio: Not installed
2024-05-16 10:10:39,614:INFO:             fastapi: Not installed
2024-05-16 10:10:39,614:INFO:             uvicorn: Not installed
2024-05-16 10:10:39,614:INFO:              m2cgen: Not installed
2024-05-16 10:10:39,614:INFO:           evidently: Not installed
2024-05-16 10:10:39,614:INFO:               fugue: Not installed
2024-05-16 10:10:39,614:INFO:           streamlit: 1.30.0
2024-05-16 10:10:39,614:INFO:             prophet: Not installed
2024-05-16 10:10:39,615:INFO:None
2024-05-16 10:10:39,615:INFO:Set up data.
2024-05-16 10:10:39,638:INFO:Set up folding strategy.
2024-05-16 10:10:39,638:INFO:Set up train/test split.
2024-05-16 10:10:39,825:INFO:Set up index.
2024-05-16 10:10:39,825:INFO:Assigning column types.
2024-05-16 10:10:39,839:INFO:Engine successfully changes for model 'lr' to 'sklearn'.
2024-05-16 10:10:40,007:INFO:Engine for model 'knn' has not been set explicitly, hence returning None.
2024-05-16 10:10:40,016:INFO:Engine for model 'rbfsvm' has not been set explicitly, hence returning None.
2024-05-16 10:10:40,140:INFO:Soft dependency imported: xgboost: 2.0.3
2024-05-16 10:10:40,147:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-05-16 10:10:40,322:INFO:Engine for model 'knn' has not been set explicitly, hence returning None.
2024-05-16 10:10:40,325:INFO:Engine for model 'rbfsvm' has not been set explicitly, hence returning None.
2024-05-16 10:10:40,438:INFO:Soft dependency imported: xgboost: 2.0.3
2024-05-16 10:10:40,447:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-05-16 10:10:40,448:INFO:Engine successfully changes for model 'knn' to 'sklearn'.
2024-05-16 10:10:40,638:INFO:Engine for model 'rbfsvm' has not been set explicitly, hence returning None.
2024-05-16 10:10:40,746:INFO:Soft dependency imported: xgboost: 2.0.3
2024-05-16 10:10:40,752:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-05-16 10:10:40,846:INFO:Engine for model 'rbfsvm' has not been set explicitly, hence returning None.
2024-05-16 10:10:40,907:INFO:Soft dependency imported: xgboost: 2.0.3
2024-05-16 10:10:40,913:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-05-16 10:10:40,916:INFO:Engine successfully changes for model 'rbfsvm' to 'sklearn'.
2024-05-16 10:10:41,109:INFO:Soft dependency imported: xgboost: 2.0.3
2024-05-16 10:10:41,115:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-05-16 10:10:41,265:INFO:Soft dependency imported: xgboost: 2.0.3
2024-05-16 10:10:41,270:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-05-16 10:10:41,276:INFO:Preparing preprocessing pipeline...
2024-05-16 10:10:41,281:INFO:Set up label encoding.
2024-05-16 10:10:41,281:INFO:Set up simple imputation.
2024-05-16 10:10:41,283:INFO:Set up column name cleaning.
2024-05-16 10:10:41,376:INFO:Finished creating preprocessing pipeline.
2024-05-16 10:10:41,391:INFO:Pipeline: Pipeline(memory=FastMemory(location=C:\Users\kpaps\AppData\Local\Temp\joblib),
         steps=[('label_encoding',
                 TransformerWrapperWithInverse(exclude=None, include=None,
                                               transformer=LabelEncoder())),
                ('numerical_imputer',
                 TransformerWrapper(exclude=None,
                                    include=['radius_mean', 'texture_mean',
                                             'perimeter_mean', 'area_mean',
                                             'smoothness_mean',
                                             'compactness_mean',
                                             'conc...
                ('categorical_imputer',
                 TransformerWrapper(exclude=None, include=[],
                                    transformer=SimpleImputer(add_indicator=False,
                                                              copy=True,
                                                              fill_value=None,
                                                              keep_empty_features=False,
                                                              missing_values=nan,
                                                              strategy='most_frequent'))),
                ('clean_column_names',
                 TransformerWrapper(exclude=None, include=None,
                                    transformer=CleanColumnNames(match='[\\]\\[\\,\\{\\}\\"\\:]+')))],
         verbose=False)
2024-05-16 10:10:41,391:INFO:Creating final display dataframe.
2024-05-16 10:10:41,737:INFO:Setup _display_container:                     Description             Value
0                    Session id              4556
1                        Target         diagnosis
2                   Target type            Binary
3                Target mapping        B: 0, M: 1
4           Original data shape         (569, 31)
5        Transformed data shape         (569, 31)
6   Transformed train set shape         (398, 31)
7    Transformed test set shape         (171, 31)
8              Numeric features                30
9                    Preprocess              True
10              Imputation type            simple
11           Numeric imputation              mean
12       Categorical imputation              mode
13               Fold Generator   StratifiedKFold
14                  Fold Number                10
15                     CPU Jobs                -1
16                      Use GPU             False
17               Log Experiment             False
18              Experiment Name  clf-default-name
19                          USI              50d0
2024-05-16 10:10:41,959:INFO:Soft dependency imported: xgboost: 2.0.3
2024-05-16 10:10:41,965:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-05-16 10:10:42,121:INFO:Soft dependency imported: xgboost: 2.0.3
2024-05-16 10:10:42,126:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-05-16 10:10:42,128:INFO:setup() successfully completed in 6.95s...............
2024-05-16 10:13:41,739:INFO:PyCaret ClassificationExperiment
2024-05-16 10:13:41,739:INFO:Logging name: clf-default-name
2024-05-16 10:13:41,739:INFO:ML Usecase: MLUsecase.CLASSIFICATION
2024-05-16 10:13:41,739:INFO:version 3.3.2
2024-05-16 10:13:41,741:INFO:Initializing setup()
2024-05-16 10:13:41,741:INFO:self.USI: f948
2024-05-16 10:13:41,741:INFO:self._variable_keys: {'html_param', 'fold_generator', 'exp_id', 'gpu_param', 'X_train', 'log_plots_param', 'data', 'fold_shuffle_param', '_ml_usecase', 'seed', 'logging_param', 'pipeline', 'memory', 'target_param', 'y_test', '_available_plots', 'gpu_n_jobs_param', 'X', 'y', 'X_test', 'is_multiclass', 'y_train', 'idx', 'fix_imbalance', 'fold_groups_param', 'USI', 'exp_name_log', 'n_jobs_param'}
2024-05-16 10:13:41,741:INFO:Checking environment
2024-05-16 10:13:41,741:INFO:python_version: 3.11.7
2024-05-16 10:13:41,741:INFO:python_build: ('main', 'Dec 15 2023 18:05:47')
2024-05-16 10:13:41,741:INFO:machine: AMD64
2024-05-16 10:13:41,741:INFO:platform: Windows-10-10.0.22631-SP0
2024-05-16 10:13:41,742:INFO:Memory: svmem(total=8259358720, available=1263337472, percent=84.7, used=6996021248, free=1263337472)
2024-05-16 10:13:41,742:INFO:Physical Core: 6
2024-05-16 10:13:41,742:INFO:Logical Core: 8
2024-05-16 10:13:41,742:INFO:Checking libraries
2024-05-16 10:13:41,742:INFO:System:
2024-05-16 10:13:41,742:INFO:    python: 3.11.7 | packaged by Anaconda, Inc. | (main, Dec 15 2023, 18:05:47) [MSC v.1916 64 bit (AMD64)]
2024-05-16 10:13:41,742:INFO:executable: C:\Users\kpaps\anaconda3\python.exe
2024-05-16 10:13:41,742:INFO:   machine: Windows-10-10.0.22631-SP0
2024-05-16 10:13:41,742:INFO:PyCaret required dependencies:
2024-05-16 10:13:41,742:INFO:                 pip: 23.3.1
2024-05-16 10:13:41,743:INFO:          setuptools: 68.2.2
2024-05-16 10:13:41,743:INFO:             pycaret: 3.3.2
2024-05-16 10:13:41,743:INFO:             IPython: 8.20.0
2024-05-16 10:13:41,743:INFO:          ipywidgets: 7.6.5
2024-05-16 10:13:41,743:INFO:                tqdm: 4.65.0
2024-05-16 10:13:41,743:INFO:               numpy: 1.26.4
2024-05-16 10:13:41,743:INFO:              pandas: 2.1.4
2024-05-16 10:13:41,743:INFO:              jinja2: 3.1.3
2024-05-16 10:13:41,743:INFO:               scipy: 1.11.4
2024-05-16 10:13:41,743:INFO:              joblib: 1.2.0
2024-05-16 10:13:41,744:INFO:             sklearn: 1.4.2
2024-05-16 10:13:41,744:INFO:                pyod: 1.1.3
2024-05-16 10:13:41,744:INFO:            imblearn: 0.12.2
2024-05-16 10:13:41,744:INFO:   category_encoders: 2.6.3
2024-05-16 10:13:41,744:INFO:            lightgbm: 4.3.0
2024-05-16 10:13:41,744:INFO:               numba: 0.59.0
2024-05-16 10:13:41,744:INFO:            requests: 2.31.0
2024-05-16 10:13:41,744:INFO:          matplotlib: 3.7.5
2024-05-16 10:13:41,744:INFO:          scikitplot: 0.3.7
2024-05-16 10:13:41,745:INFO:         yellowbrick: 1.5
2024-05-16 10:13:41,745:INFO:              plotly: 5.22.0
2024-05-16 10:13:41,745:INFO:    plotly-resampler: Not installed
2024-05-16 10:13:41,745:INFO:             kaleido: 0.2.1
2024-05-16 10:13:41,745:INFO:           schemdraw: 0.15
2024-05-16 10:13:41,745:INFO:         statsmodels: 0.14.0
2024-05-16 10:13:41,745:INFO:              sktime: 0.26.0
2024-05-16 10:13:41,745:INFO:               tbats: 1.1.3
2024-05-16 10:13:41,745:INFO:            pmdarima: 2.0.4
2024-05-16 10:13:41,746:INFO:              psutil: 5.9.0
2024-05-16 10:13:41,746:INFO:          markupsafe: 2.1.3
2024-05-16 10:13:41,746:INFO:             pickle5: Not installed
2024-05-16 10:13:41,746:INFO:         cloudpickle: 2.2.1
2024-05-16 10:13:41,746:INFO:         deprecation: 2.1.0
2024-05-16 10:13:41,746:INFO:              xxhash: 3.4.1
2024-05-16 10:13:41,746:INFO:           wurlitzer: Not installed
2024-05-16 10:13:41,746:INFO:PyCaret optional dependencies:
2024-05-16 10:13:41,746:INFO:                shap: Not installed
2024-05-16 10:13:41,746:INFO:           interpret: Not installed
2024-05-16 10:13:41,748:INFO:                umap: Not installed
2024-05-16 10:13:41,748:INFO:     ydata_profiling: Not installed
2024-05-16 10:13:41,748:INFO:  explainerdashboard: Not installed
2024-05-16 10:13:41,748:INFO:             autoviz: Not installed
2024-05-16 10:13:41,748:INFO:           fairlearn: Not installed
2024-05-16 10:13:41,748:INFO:          deepchecks: Not installed
2024-05-16 10:13:41,748:INFO:             xgboost: 2.0.3
2024-05-16 10:13:41,748:INFO:            catboost: Not installed
2024-05-16 10:13:41,748:INFO:              kmodes: Not installed
2024-05-16 10:13:41,750:INFO:             mlxtend: Not installed
2024-05-16 10:13:41,750:INFO:       statsforecast: Not installed
2024-05-16 10:13:41,750:INFO:        tune_sklearn: Not installed
2024-05-16 10:13:41,750:INFO:                 ray: Not installed
2024-05-16 10:13:41,750:INFO:            hyperopt: Not installed
2024-05-16 10:13:41,750:INFO:              optuna: Not installed
2024-05-16 10:13:41,750:INFO:               skopt: Not installed
2024-05-16 10:13:41,750:INFO:              mlflow: Not installed
2024-05-16 10:13:41,751:INFO:              gradio: Not installed
2024-05-16 10:13:41,751:INFO:             fastapi: Not installed
2024-05-16 10:13:41,751:INFO:             uvicorn: Not installed
2024-05-16 10:13:41,751:INFO:              m2cgen: Not installed
2024-05-16 10:13:41,754:INFO:           evidently: Not installed
2024-05-16 10:13:41,755:INFO:               fugue: Not installed
2024-05-16 10:13:41,755:INFO:           streamlit: 1.30.0
2024-05-16 10:13:41,755:INFO:             prophet: Not installed
2024-05-16 10:13:41,755:INFO:None
2024-05-16 10:13:41,755:INFO:Set up data.
2024-05-16 10:13:41,773:INFO:Set up folding strategy.
2024-05-16 10:13:41,774:INFO:Set up train/test split.
2024-05-16 10:13:41,791:INFO:Set up index.
2024-05-16 10:13:41,791:INFO:Assigning column types.
2024-05-16 10:13:41,821:INFO:Engine successfully changes for model 'lr' to 'sklearn'.
2024-05-16 10:13:41,981:INFO:Engine for model 'knn' has not been set explicitly, hence returning None.
2024-05-16 10:13:41,984:INFO:Engine for model 'rbfsvm' has not been set explicitly, hence returning None.
2024-05-16 10:13:42,117:INFO:Soft dependency imported: xgboost: 2.0.3
2024-05-16 10:13:42,128:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-05-16 10:13:42,354:INFO:Engine for model 'knn' has not been set explicitly, hence returning None.
2024-05-16 10:13:42,356:INFO:Engine for model 'rbfsvm' has not been set explicitly, hence returning None.
2024-05-16 10:13:42,458:INFO:Soft dependency imported: xgboost: 2.0.3
2024-05-16 10:13:42,475:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-05-16 10:13:42,477:INFO:Engine successfully changes for model 'knn' to 'sklearn'.
2024-05-16 10:13:42,666:INFO:Engine for model 'rbfsvm' has not been set explicitly, hence returning None.
2024-05-16 10:13:42,758:INFO:Soft dependency imported: xgboost: 2.0.3
2024-05-16 10:13:42,767:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-05-16 10:13:42,940:INFO:Engine for model 'rbfsvm' has not been set explicitly, hence returning None.
2024-05-16 10:13:43,061:INFO:Soft dependency imported: xgboost: 2.0.3
2024-05-16 10:13:43,070:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-05-16 10:13:43,071:INFO:Engine successfully changes for model 'rbfsvm' to 'sklearn'.
2024-05-16 10:13:43,303:INFO:Soft dependency imported: xgboost: 2.0.3
2024-05-16 10:13:43,313:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-05-16 10:13:43,560:INFO:Soft dependency imported: xgboost: 2.0.3
2024-05-16 10:13:43,569:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-05-16 10:13:43,572:INFO:Preparing preprocessing pipeline...
2024-05-16 10:13:43,575:INFO:Set up label encoding.
2024-05-16 10:13:43,575:INFO:Set up simple imputation.
2024-05-16 10:13:43,577:INFO:Set up column name cleaning.
2024-05-16 10:13:43,674:INFO:Finished creating preprocessing pipeline.
2024-05-16 10:13:43,686:INFO:Pipeline: Pipeline(memory=FastMemory(location=C:\Users\kpaps\AppData\Local\Temp\joblib),
         steps=[('label_encoding',
                 TransformerWrapperWithInverse(exclude=None, include=None,
                                               transformer=LabelEncoder())),
                ('numerical_imputer',
                 TransformerWrapper(exclude=None,
                                    include=['radius_mean', 'texture_mean',
                                             'perimeter_mean', 'area_mean',
                                             'smoothness_mean',
                                             'compactness_mean',
                                             'conc...
                ('categorical_imputer',
                 TransformerWrapper(exclude=None, include=[],
                                    transformer=SimpleImputer(add_indicator=False,
                                                              copy=True,
                                                              fill_value=None,
                                                              keep_empty_features=False,
                                                              missing_values=nan,
                                                              strategy='most_frequent'))),
                ('clean_column_names',
                 TransformerWrapper(exclude=None, include=None,
                                    transformer=CleanColumnNames(match='[\\]\\[\\,\\{\\}\\"\\:]+')))],
         verbose=False)
2024-05-16 10:13:43,686:INFO:Creating final display dataframe.
2024-05-16 10:13:44,068:INFO:Setup _display_container:                     Description             Value
0                    Session id              3615
1                        Target         diagnosis
2                   Target type            Binary
3                Target mapping        B: 0, M: 1
4           Original data shape         (569, 31)
5        Transformed data shape         (569, 31)
6   Transformed train set shape         (398, 31)
7    Transformed test set shape         (171, 31)
8              Numeric features                30
9                    Preprocess              True
10              Imputation type            simple
11           Numeric imputation              mean
12       Categorical imputation              mode
13               Fold Generator   StratifiedKFold
14                  Fold Number                10
15                     CPU Jobs                -1
16                      Use GPU             False
17               Log Experiment             False
18              Experiment Name  clf-default-name
19                          USI              f948
2024-05-16 10:13:44,347:INFO:Soft dependency imported: xgboost: 2.0.3
2024-05-16 10:13:44,355:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-05-16 10:13:44,607:INFO:Soft dependency imported: xgboost: 2.0.3
2024-05-16 10:13:44,614:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-05-16 10:13:44,619:INFO:setup() successfully completed in 2.88s...............
2024-05-16 10:14:20,114:INFO:Initializing compare_models()
2024-05-16 10:14:20,114:INFO:compare_models(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000001C246CA6AD0>, include=None, exclude=None, fold=None, round=4, cross_validation=True, sort=Accuracy, n_select=1, budget_time=None, turbo=True, errors=ignore, fit_kwargs=None, groups=None, experiment_custom_tags=None, probability_threshold=None, verbose=True, parallel=None, caller_params={'self': <pycaret.classification.oop.ClassificationExperiment object at 0x000001C246CA6AD0>, 'include': None, 'exclude': None, 'fold': None, 'round': 4, 'cross_validation': True, 'sort': 'Accuracy', 'n_select': 1, 'budget_time': None, 'turbo': True, 'errors': 'ignore', 'fit_kwargs': None, 'groups': None, 'experiment_custom_tags': None, 'probability_threshold': None, 'engine': None, 'verbose': True, 'parallel': None, '__class__': <class 'pycaret.classification.oop.ClassificationExperiment'>})
2024-05-16 10:14:20,114:INFO:Checking exceptions
2024-05-16 10:14:20,126:INFO:Preparing display monitor
2024-05-16 10:14:20,192:INFO:Initializing Logistic Regression
2024-05-16 10:14:20,194:INFO:Total runtime is 3.3263365427653e-05 minutes
2024-05-16 10:14:20,208:INFO:SubProcess create_model() called ==================================
2024-05-16 10:14:20,209:INFO:Initializing create_model()
2024-05-16 10:14:20,210:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000001C246CA6AD0>, estimator=lr, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x000001C2470D7550>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2024-05-16 10:14:20,210:INFO:Checking exceptions
2024-05-16 10:14:20,211:INFO:Importing libraries
2024-05-16 10:14:20,212:INFO:Copying training dataset
2024-05-16 10:14:20,231:INFO:Defining folds
2024-05-16 10:14:20,231:INFO:Declaring metric variables
2024-05-16 10:14:20,241:INFO:Importing untrained model
2024-05-16 10:14:20,249:INFO:Logistic Regression Imported successfully
2024-05-16 10:14:20,262:INFO:Starting cross validation
2024-05-16 10:14:20,264:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2024-05-16 10:14:37,854:WARNING:C:\Users\kpaps\anaconda3\Lib\site-packages\sklearn\linear_model\_logistic.py:469: ConvergenceWarning: lbfgs failed to converge (status=1):
STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.

Increase the number of iterations (max_iter) or scale the data as shown in:
    https://scikit-learn.org/stable/modules/preprocessing.html
Please also refer to the documentation for alternative solver options:
    https://scikit-learn.org/stable/modules/linear_model.html#logistic-regression
  n_iter_i = _check_optimize_result(

2024-05-16 10:14:37,889:WARNING:C:\Users\kpaps\anaconda3\Lib\site-packages\sklearn\linear_model\_logistic.py:469: ConvergenceWarning: lbfgs failed to converge (status=1):
STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.

Increase the number of iterations (max_iter) or scale the data as shown in:
    https://scikit-learn.org/stable/modules/preprocessing.html
Please also refer to the documentation for alternative solver options:
    https://scikit-learn.org/stable/modules/linear_model.html#logistic-regression
  n_iter_i = _check_optimize_result(

2024-05-16 10:14:37,934:WARNING:C:\Users\kpaps\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-16 10:14:37,942:WARNING:C:\Users\kpaps\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-16 10:14:37,948:WARNING:C:\Users\kpaps\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-16 10:14:37,984:WARNING:C:\Users\kpaps\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-16 10:14:37,991:WARNING:C:\Users\kpaps\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-16 10:14:37,998:WARNING:C:\Users\kpaps\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-16 10:14:38,020:WARNING:C:\Users\kpaps\anaconda3\Lib\site-packages\sklearn\linear_model\_logistic.py:469: ConvergenceWarning: lbfgs failed to converge (status=1):
STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.

Increase the number of iterations (max_iter) or scale the data as shown in:
    https://scikit-learn.org/stable/modules/preprocessing.html
Please also refer to the documentation for alternative solver options:
    https://scikit-learn.org/stable/modules/linear_model.html#logistic-regression
  n_iter_i = _check_optimize_result(

2024-05-16 10:14:38,024:WARNING:C:\Users\kpaps\anaconda3\Lib\site-packages\sklearn\linear_model\_logistic.py:469: ConvergenceWarning: lbfgs failed to converge (status=1):
STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.

Increase the number of iterations (max_iter) or scale the data as shown in:
    https://scikit-learn.org/stable/modules/preprocessing.html
Please also refer to the documentation for alternative solver options:
    https://scikit-learn.org/stable/modules/linear_model.html#logistic-regression
  n_iter_i = _check_optimize_result(

2024-05-16 10:14:38,052:WARNING:C:\Users\kpaps\anaconda3\Lib\site-packages\sklearn\linear_model\_logistic.py:469: ConvergenceWarning: lbfgs failed to converge (status=1):
STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.

Increase the number of iterations (max_iter) or scale the data as shown in:
    https://scikit-learn.org/stable/modules/preprocessing.html
Please also refer to the documentation for alternative solver options:
    https://scikit-learn.org/stable/modules/linear_model.html#logistic-regression
  n_iter_i = _check_optimize_result(

2024-05-16 10:14:38,079:WARNING:C:\Users\kpaps\anaconda3\Lib\site-packages\sklearn\linear_model\_logistic.py:469: ConvergenceWarning: lbfgs failed to converge (status=1):
STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.

Increase the number of iterations (max_iter) or scale the data as shown in:
    https://scikit-learn.org/stable/modules/preprocessing.html
Please also refer to the documentation for alternative solver options:
    https://scikit-learn.org/stable/modules/linear_model.html#logistic-regression
  n_iter_i = _check_optimize_result(

2024-05-16 10:14:38,108:WARNING:C:\Users\kpaps\anaconda3\Lib\site-packages\sklearn\linear_model\_logistic.py:469: ConvergenceWarning: lbfgs failed to converge (status=1):
STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.

Increase the number of iterations (max_iter) or scale the data as shown in:
    https://scikit-learn.org/stable/modules/preprocessing.html
Please also refer to the documentation for alternative solver options:
    https://scikit-learn.org/stable/modules/linear_model.html#logistic-regression
  n_iter_i = _check_optimize_result(

2024-05-16 10:14:38,125:WARNING:C:\Users\kpaps\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-16 10:14:38,138:WARNING:C:\Users\kpaps\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-16 10:14:38,138:WARNING:C:\Users\kpaps\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-16 10:14:38,146:WARNING:C:\Users\kpaps\anaconda3\Lib\site-packages\sklearn\linear_model\_logistic.py:469: ConvergenceWarning: lbfgs failed to converge (status=1):
STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.

Increase the number of iterations (max_iter) or scale the data as shown in:
    https://scikit-learn.org/stable/modules/preprocessing.html
Please also refer to the documentation for alternative solver options:
    https://scikit-learn.org/stable/modules/linear_model.html#logistic-regression
  n_iter_i = _check_optimize_result(

2024-05-16 10:14:38,147:WARNING:C:\Users\kpaps\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-16 10:14:38,155:WARNING:C:\Users\kpaps\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-16 10:14:38,159:WARNING:C:\Users\kpaps\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-16 10:14:38,166:WARNING:C:\Users\kpaps\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-16 10:14:38,173:WARNING:C:\Users\kpaps\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-16 10:14:38,183:WARNING:C:\Users\kpaps\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-16 10:14:38,190:WARNING:C:\Users\kpaps\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-16 10:14:38,190:WARNING:C:\Users\kpaps\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-16 10:14:38,191:WARNING:C:\Users\kpaps\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-16 10:14:38,197:WARNING:C:\Users\kpaps\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-16 10:14:38,200:WARNING:C:\Users\kpaps\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-16 10:14:38,208:WARNING:C:\Users\kpaps\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-16 10:14:38,237:WARNING:C:\Users\kpaps\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-16 10:14:38,250:WARNING:C:\Users\kpaps\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-16 10:14:38,263:WARNING:C:\Users\kpaps\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-16 10:14:38,892:WARNING:C:\Users\kpaps\anaconda3\Lib\site-packages\sklearn\linear_model\_logistic.py:469: ConvergenceWarning: lbfgs failed to converge (status=1):
STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.

Increase the number of iterations (max_iter) or scale the data as shown in:
    https://scikit-learn.org/stable/modules/preprocessing.html
Please also refer to the documentation for alternative solver options:
    https://scikit-learn.org/stable/modules/linear_model.html#logistic-regression
  n_iter_i = _check_optimize_result(

2024-05-16 10:14:38,900:WARNING:C:\Users\kpaps\anaconda3\Lib\site-packages\sklearn\linear_model\_logistic.py:469: ConvergenceWarning: lbfgs failed to converge (status=1):
STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.

Increase the number of iterations (max_iter) or scale the data as shown in:
    https://scikit-learn.org/stable/modules/preprocessing.html
Please also refer to the documentation for alternative solver options:
    https://scikit-learn.org/stable/modules/linear_model.html#logistic-regression
  n_iter_i = _check_optimize_result(

2024-05-16 10:14:38,923:WARNING:C:\Users\kpaps\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-16 10:14:38,926:WARNING:C:\Users\kpaps\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-16 10:14:38,929:WARNING:C:\Users\kpaps\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-16 10:14:38,939:WARNING:C:\Users\kpaps\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-16 10:14:38,939:WARNING:C:\Users\kpaps\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-16 10:14:38,945:WARNING:C:\Users\kpaps\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-16 10:14:38,956:INFO:Calculating mean and std
2024-05-16 10:14:38,959:INFO:Creating metrics dataframe
2024-05-16 10:14:38,968:INFO:Uploading results into container
2024-05-16 10:14:38,969:INFO:Uploading model into container now
2024-05-16 10:14:38,970:INFO:_master_model_container: 1
2024-05-16 10:14:38,970:INFO:_display_container: 2
2024-05-16 10:14:38,971:INFO:LogisticRegression(C=1.0, class_weight=None, dual=False, fit_intercept=True,
                   intercept_scaling=1, l1_ratio=None, max_iter=1000,
                   multi_class='auto', n_jobs=None, penalty='l2',
                   random_state=3615, solver='lbfgs', tol=0.0001, verbose=0,
                   warm_start=False)
2024-05-16 10:14:38,971:INFO:create_model() successfully completed......................................
2024-05-16 10:14:40,720:INFO:SubProcess create_model() end ==================================
2024-05-16 10:14:40,722:INFO:Creating metrics dataframe
2024-05-16 10:14:40,741:INFO:Initializing K Neighbors Classifier
2024-05-16 10:14:40,741:INFO:Total runtime is 0.342480190594991 minutes
2024-05-16 10:14:40,752:INFO:SubProcess create_model() called ==================================
2024-05-16 10:14:40,753:INFO:Initializing create_model()
2024-05-16 10:14:40,753:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000001C246CA6AD0>, estimator=knn, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x000001C2470D7550>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2024-05-16 10:14:40,754:INFO:Checking exceptions
2024-05-16 10:14:40,754:INFO:Importing libraries
2024-05-16 10:14:40,754:INFO:Copying training dataset
2024-05-16 10:14:40,789:INFO:Defining folds
2024-05-16 10:14:40,790:INFO:Declaring metric variables
2024-05-16 10:14:40,797:INFO:Importing untrained model
2024-05-16 10:14:40,806:INFO:K Neighbors Classifier Imported successfully
2024-05-16 10:14:40,822:INFO:Starting cross validation
2024-05-16 10:14:40,824:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2024-05-16 10:14:42,259:WARNING:C:\Users\kpaps\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-16 10:14:42,273:WARNING:C:\Users\kpaps\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-16 10:14:42,295:WARNING:C:\Users\kpaps\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-16 10:14:42,305:WARNING:C:\Users\kpaps\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-16 10:14:42,313:WARNING:C:\Users\kpaps\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-16 10:14:42,322:WARNING:C:\Users\kpaps\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-16 10:14:42,346:WARNING:C:\Users\kpaps\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-16 10:14:42,349:WARNING:C:\Users\kpaps\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-16 10:14:42,353:WARNING:C:\Users\kpaps\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-16 10:14:42,354:WARNING:C:\Users\kpaps\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-16 10:14:42,356:WARNING:C:\Users\kpaps\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-16 10:14:42,360:WARNING:C:\Users\kpaps\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-16 10:14:42,361:WARNING:C:\Users\kpaps\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-16 10:14:42,373:WARNING:C:\Users\kpaps\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-16 10:14:42,392:WARNING:C:\Users\kpaps\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-16 10:14:42,395:WARNING:C:\Users\kpaps\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-16 10:14:42,400:WARNING:C:\Users\kpaps\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-16 10:14:42,401:WARNING:C:\Users\kpaps\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-16 10:14:42,407:WARNING:C:\Users\kpaps\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-16 10:14:42,409:WARNING:C:\Users\kpaps\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-16 10:14:42,414:WARNING:C:\Users\kpaps\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-16 10:14:42,632:WARNING:C:\Users\kpaps\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-16 10:14:42,645:WARNING:C:\Users\kpaps\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-16 10:14:42,652:WARNING:C:\Users\kpaps\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-16 10:14:42,674:WARNING:C:\Users\kpaps\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-16 10:14:42,694:WARNING:C:\Users\kpaps\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-16 10:14:42,713:WARNING:C:\Users\kpaps\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-16 10:14:42,713:WARNING:C:\Users\kpaps\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-16 10:14:42,719:WARNING:C:\Users\kpaps\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-16 10:14:42,725:WARNING:C:\Users\kpaps\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-16 10:14:42,749:INFO:Calculating mean and std
2024-05-16 10:14:42,753:INFO:Creating metrics dataframe
2024-05-16 10:14:42,758:INFO:Uploading results into container
2024-05-16 10:14:42,760:INFO:Uploading model into container now
2024-05-16 10:14:42,761:INFO:_master_model_container: 2
2024-05-16 10:14:42,761:INFO:_display_container: 2
2024-05-16 10:14:42,761:INFO:KNeighborsClassifier(algorithm='auto', leaf_size=30, metric='minkowski',
                     metric_params=None, n_jobs=-1, n_neighbors=5, p=2,
                     weights='uniform')
2024-05-16 10:14:42,761:INFO:create_model() successfully completed......................................
2024-05-16 10:14:43,454:INFO:SubProcess create_model() end ==================================
2024-05-16 10:14:43,455:INFO:Creating metrics dataframe
2024-05-16 10:14:43,472:INFO:Initializing Naive Bayes
2024-05-16 10:14:43,473:INFO:Total runtime is 0.38801614840825394 minutes
2024-05-16 10:14:43,483:INFO:SubProcess create_model() called ==================================
2024-05-16 10:14:43,484:INFO:Initializing create_model()
2024-05-16 10:14:43,484:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000001C246CA6AD0>, estimator=nb, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x000001C2470D7550>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2024-05-16 10:14:43,484:INFO:Checking exceptions
2024-05-16 10:14:43,484:INFO:Importing libraries
2024-05-16 10:14:43,485:INFO:Copying training dataset
2024-05-16 10:14:43,513:INFO:Defining folds
2024-05-16 10:14:43,513:INFO:Declaring metric variables
2024-05-16 10:14:43,521:INFO:Importing untrained model
2024-05-16 10:14:43,528:INFO:Naive Bayes Imported successfully
2024-05-16 10:14:43,543:INFO:Starting cross validation
2024-05-16 10:14:43,545:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2024-05-16 10:14:43,686:WARNING:C:\Users\kpaps\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-16 10:14:43,694:WARNING:C:\Users\kpaps\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-16 10:14:43,700:WARNING:C:\Users\kpaps\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-16 10:14:43,777:WARNING:C:\Users\kpaps\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-16 10:14:43,783:WARNING:C:\Users\kpaps\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-16 10:14:43,789:WARNING:C:\Users\kpaps\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-16 10:14:43,808:WARNING:C:\Users\kpaps\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-16 10:14:43,826:WARNING:C:\Users\kpaps\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-16 10:14:43,830:WARNING:C:\Users\kpaps\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-16 10:14:43,836:WARNING:C:\Users\kpaps\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-16 10:14:43,841:WARNING:C:\Users\kpaps\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-16 10:14:43,867:WARNING:C:\Users\kpaps\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-16 10:14:43,873:WARNING:C:\Users\kpaps\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-16 10:14:43,882:WARNING:C:\Users\kpaps\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-16 10:14:43,903:WARNING:C:\Users\kpaps\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-16 10:14:43,909:WARNING:C:\Users\kpaps\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-16 10:14:43,921:WARNING:C:\Users\kpaps\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-16 10:14:43,926:WARNING:C:\Users\kpaps\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-16 10:14:43,928:WARNING:C:\Users\kpaps\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-16 10:14:43,932:WARNING:C:\Users\kpaps\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-16 10:14:43,938:WARNING:C:\Users\kpaps\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-16 10:14:43,971:WARNING:C:\Users\kpaps\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-16 10:14:43,978:WARNING:C:\Users\kpaps\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-16 10:14:43,996:WARNING:C:\Users\kpaps\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-16 10:14:43,997:WARNING:C:\Users\kpaps\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-16 10:14:44,010:WARNING:C:\Users\kpaps\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-16 10:14:44,017:WARNING:C:\Users\kpaps\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-16 10:14:44,046:WARNING:C:\Users\kpaps\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-16 10:14:44,054:WARNING:C:\Users\kpaps\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-16 10:14:44,059:WARNING:C:\Users\kpaps\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-16 10:14:44,074:INFO:Calculating mean and std
2024-05-16 10:14:44,079:INFO:Creating metrics dataframe
2024-05-16 10:14:44,086:INFO:Uploading results into container
2024-05-16 10:14:44,087:INFO:Uploading model into container now
2024-05-16 10:14:44,088:INFO:_master_model_container: 3
2024-05-16 10:14:44,088:INFO:_display_container: 2
2024-05-16 10:14:44,088:INFO:GaussianNB(priors=None, var_smoothing=1e-09)
2024-05-16 10:14:44,088:INFO:create_model() successfully completed......................................
2024-05-16 10:14:44,797:INFO:SubProcess create_model() end ==================================
2024-05-16 10:14:44,797:INFO:Creating metrics dataframe
2024-05-16 10:14:44,826:INFO:Initializing Decision Tree Classifier
2024-05-16 10:14:44,829:INFO:Total runtime is 0.41061302820841467 minutes
2024-05-16 10:14:44,842:INFO:SubProcess create_model() called ==================================
2024-05-16 10:14:44,843:INFO:Initializing create_model()
2024-05-16 10:14:44,843:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000001C246CA6AD0>, estimator=dt, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x000001C2470D7550>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2024-05-16 10:14:44,843:INFO:Checking exceptions
2024-05-16 10:14:44,843:INFO:Importing libraries
2024-05-16 10:14:44,844:INFO:Copying training dataset
2024-05-16 10:14:44,866:INFO:Defining folds
2024-05-16 10:14:44,866:INFO:Declaring metric variables
2024-05-16 10:14:44,876:INFO:Importing untrained model
2024-05-16 10:14:44,891:INFO:Decision Tree Classifier Imported successfully
2024-05-16 10:14:44,907:INFO:Starting cross validation
2024-05-16 10:14:44,910:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2024-05-16 10:14:45,105:WARNING:C:\Users\kpaps\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-16 10:14:45,107:WARNING:C:\Users\kpaps\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-16 10:14:45,111:WARNING:C:\Users\kpaps\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-16 10:14:45,113:WARNING:C:\Users\kpaps\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-16 10:14:45,125:WARNING:C:\Users\kpaps\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-16 10:14:45,132:WARNING:C:\Users\kpaps\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-16 10:14:45,226:WARNING:C:\Users\kpaps\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-16 10:14:45,117:WARNING:C:\Users\kpaps\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-16 10:14:45,267:WARNING:C:\Users\kpaps\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-16 10:14:45,277:WARNING:C:\Users\kpaps\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-16 10:14:45,311:WARNING:C:\Users\kpaps\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-16 10:14:45,313:WARNING:C:\Users\kpaps\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-16 10:14:45,316:WARNING:C:\Users\kpaps\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-16 10:14:45,319:WARNING:C:\Users\kpaps\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-16 10:14:45,323:WARNING:C:\Users\kpaps\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-16 10:14:45,325:WARNING:C:\Users\kpaps\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-16 10:14:45,330:WARNING:C:\Users\kpaps\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-16 10:14:45,330:WARNING:C:\Users\kpaps\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-16 10:14:45,334:WARNING:C:\Users\kpaps\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-16 10:14:45,348:WARNING:C:\Users\kpaps\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-16 10:14:45,361:WARNING:C:\Users\kpaps\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-16 10:14:45,383:WARNING:C:\Users\kpaps\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-16 10:14:45,390:WARNING:C:\Users\kpaps\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-16 10:14:45,406:WARNING:C:\Users\kpaps\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-16 10:14:45,419:WARNING:C:\Users\kpaps\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-16 10:14:45,422:WARNING:C:\Users\kpaps\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-16 10:14:45,425:WARNING:C:\Users\kpaps\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-16 10:14:45,437:WARNING:C:\Users\kpaps\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-16 10:14:45,444:WARNING:C:\Users\kpaps\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-16 10:14:45,456:INFO:Calculating mean and std
2024-05-16 10:14:45,461:INFO:Creating metrics dataframe
2024-05-16 10:14:45,466:INFO:Uploading results into container
2024-05-16 10:14:45,467:INFO:Uploading model into container now
2024-05-16 10:14:45,468:INFO:_master_model_container: 4
2024-05-16 10:14:45,468:INFO:_display_container: 2
2024-05-16 10:14:45,469:INFO:DecisionTreeClassifier(ccp_alpha=0.0, class_weight=None, criterion='gini',
                       max_depth=None, max_features=None, max_leaf_nodes=None,
                       min_impurity_decrease=0.0, min_samples_leaf=1,
                       min_samples_split=2, min_weight_fraction_leaf=0.0,
                       monotonic_cst=None, random_state=3615, splitter='best')
2024-05-16 10:14:45,469:INFO:create_model() successfully completed......................................
2024-05-16 10:14:46,086:INFO:SubProcess create_model() end ==================================
2024-05-16 10:14:46,086:INFO:Creating metrics dataframe
2024-05-16 10:14:46,204:INFO:Initializing SVM - Linear Kernel
2024-05-16 10:14:46,204:INFO:Total runtime is 0.4335344831148783 minutes
2024-05-16 10:14:46,226:INFO:SubProcess create_model() called ==================================
2024-05-16 10:14:46,228:INFO:Initializing create_model()
2024-05-16 10:14:46,229:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000001C246CA6AD0>, estimator=svm, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x000001C2470D7550>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2024-05-16 10:14:46,229:INFO:Checking exceptions
2024-05-16 10:14:46,231:INFO:Importing libraries
2024-05-16 10:14:46,231:INFO:Copying training dataset
2024-05-16 10:14:46,256:INFO:Defining folds
2024-05-16 10:14:46,257:INFO:Declaring metric variables
2024-05-16 10:14:46,267:INFO:Importing untrained model
2024-05-16 10:14:46,279:INFO:SVM - Linear Kernel Imported successfully
2024-05-16 10:14:46,300:INFO:Starting cross validation
2024-05-16 10:14:46,305:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2024-05-16 10:14:46,505:WARNING:C:\Users\kpaps\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-16 10:14:46,506:WARNING:C:\Users\kpaps\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-16 10:14:46,538:WARNING:C:\Users\kpaps\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-16 10:14:46,539:WARNING:C:\Users\kpaps\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-16 10:14:46,539:WARNING:C:\Users\kpaps\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-16 10:14:46,547:WARNING:C:\Users\kpaps\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-16 10:14:46,553:WARNING:C:\Users\kpaps\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-16 10:14:46,559:WARNING:C:\Users\kpaps\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-16 10:14:46,560:WARNING:C:\Users\kpaps\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-16 10:14:46,565:WARNING:C:\Users\kpaps\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-16 10:14:46,581:WARNING:C:\Users\kpaps\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-16 10:14:46,588:WARNING:C:\Users\kpaps\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-16 10:14:46,594:WARNING:C:\Users\kpaps\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-16 10:14:46,594:WARNING:C:\Users\kpaps\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-16 10:14:46,601:WARNING:C:\Users\kpaps\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-16 10:14:46,602:WARNING:C:\Users\kpaps\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-16 10:14:46,609:WARNING:C:\Users\kpaps\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-16 10:14:46,623:WARNING:C:\Users\kpaps\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-16 10:14:46,625:WARNING:C:\Users\kpaps\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-16 10:14:46,626:WARNING:C:\Users\kpaps\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-16 10:14:46,629:WARNING:C:\Users\kpaps\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-16 10:14:46,632:WARNING:C:\Users\kpaps\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-16 10:14:46,635:WARNING:C:\Users\kpaps\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-16 10:14:46,639:WARNING:C:\Users\kpaps\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-16 10:14:46,686:WARNING:C:\Users\kpaps\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-16 10:14:46,691:WARNING:C:\Users\kpaps\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-16 10:14:46,695:WARNING:C:\Users\kpaps\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-16 10:14:46,697:WARNING:C:\Users\kpaps\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-16 10:14:46,705:WARNING:C:\Users\kpaps\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-16 10:14:46,710:WARNING:C:\Users\kpaps\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-16 10:14:46,723:INFO:Calculating mean and std
2024-05-16 10:14:46,724:INFO:Creating metrics dataframe
2024-05-16 10:14:46,730:INFO:Uploading results into container
2024-05-16 10:14:46,733:INFO:Uploading model into container now
2024-05-16 10:14:46,734:INFO:_master_model_container: 5
2024-05-16 10:14:46,734:INFO:_display_container: 2
2024-05-16 10:14:46,735:INFO:SGDClassifier(alpha=0.0001, average=False, class_weight=None,
              early_stopping=False, epsilon=0.1, eta0=0.001, fit_intercept=True,
              l1_ratio=0.15, learning_rate='optimal', loss='hinge',
              max_iter=1000, n_iter_no_change=5, n_jobs=-1, penalty='l2',
              power_t=0.5, random_state=3615, shuffle=True, tol=0.001,
              validation_fraction=0.1, verbose=0, warm_start=False)
2024-05-16 10:14:46,735:INFO:create_model() successfully completed......................................
2024-05-16 10:14:47,258:INFO:SubProcess create_model() end ==================================
2024-05-16 10:14:47,263:INFO:Creating metrics dataframe
2024-05-16 10:14:47,286:INFO:Initializing Ridge Classifier
2024-05-16 10:14:47,286:INFO:Total runtime is 0.45155617793401076 minutes
2024-05-16 10:14:47,307:INFO:SubProcess create_model() called ==================================
2024-05-16 10:14:47,307:INFO:Initializing create_model()
2024-05-16 10:14:47,307:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000001C246CA6AD0>, estimator=ridge, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x000001C2470D7550>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2024-05-16 10:14:47,307:INFO:Checking exceptions
2024-05-16 10:14:47,309:INFO:Importing libraries
2024-05-16 10:14:47,309:INFO:Copying training dataset
2024-05-16 10:14:47,373:INFO:Defining folds
2024-05-16 10:14:47,376:INFO:Declaring metric variables
2024-05-16 10:14:47,391:INFO:Importing untrained model
2024-05-16 10:14:47,402:INFO:Ridge Classifier Imported successfully
2024-05-16 10:14:47,429:INFO:Starting cross validation
2024-05-16 10:14:47,435:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2024-05-16 10:14:47,644:WARNING:C:\Users\kpaps\anaconda3\Lib\site-packages\sklearn\linear_model\_ridge.py:204: LinAlgWarning: Ill-conditioned matrix (rcond=4.61058e-09): result may not be accurate.
  return linalg.solve(A, Xy, assume_a="pos", overwrite_a=True).T

2024-05-16 10:14:47,649:WARNING:C:\Users\kpaps\anaconda3\Lib\site-packages\sklearn\linear_model\_ridge.py:204: LinAlgWarning: Ill-conditioned matrix (rcond=4.76357e-09): result may not be accurate.
  return linalg.solve(A, Xy, assume_a="pos", overwrite_a=True).T

2024-05-16 10:14:47,659:WARNING:C:\Users\kpaps\anaconda3\Lib\site-packages\sklearn\linear_model\_ridge.py:204: LinAlgWarning: Ill-conditioned matrix (rcond=4.60719e-09): result may not be accurate.
  return linalg.solve(A, Xy, assume_a="pos", overwrite_a=True).T

2024-05-16 10:14:47,672:WARNING:C:\Users\kpaps\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-16 10:14:47,674:WARNING:C:\Users\kpaps\anaconda3\Lib\site-packages\sklearn\linear_model\_ridge.py:204: LinAlgWarning: Ill-conditioned matrix (rcond=4.90548e-09): result may not be accurate.
  return linalg.solve(A, Xy, assume_a="pos", overwrite_a=True).T

2024-05-16 10:14:47,678:WARNING:C:\Users\kpaps\anaconda3\Lib\site-packages\sklearn\linear_model\_ridge.py:204: LinAlgWarning: Ill-conditioned matrix (rcond=5.26962e-09): result may not be accurate.
  return linalg.solve(A, Xy, assume_a="pos", overwrite_a=True).T

2024-05-16 10:14:47,685:WARNING:C:\Users\kpaps\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-16 10:14:47,687:WARNING:C:\Users\kpaps\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-16 10:14:47,689:WARNING:C:\Users\kpaps\anaconda3\Lib\site-packages\sklearn\linear_model\_ridge.py:204: LinAlgWarning: Ill-conditioned matrix (rcond=4.85104e-09): result may not be accurate.
  return linalg.solve(A, Xy, assume_a="pos", overwrite_a=True).T

2024-05-16 10:14:47,697:WARNING:C:\Users\kpaps\anaconda3\Lib\site-packages\sklearn\linear_model\_ridge.py:204: LinAlgWarning: Ill-conditioned matrix (rcond=4.88681e-09): result may not be accurate.
  return linalg.solve(A, Xy, assume_a="pos", overwrite_a=True).T

2024-05-16 10:14:47,701:WARNING:C:\Users\kpaps\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-16 10:14:47,715:WARNING:C:\Users\kpaps\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-16 10:14:47,722:WARNING:C:\Users\kpaps\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-16 10:14:47,724:WARNING:C:\Users\kpaps\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-16 10:14:47,725:WARNING:C:\Users\kpaps\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-16 10:14:47,727:WARNING:C:\Users\kpaps\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-16 10:14:47,734:WARNING:C:\Users\kpaps\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-16 10:14:47,737:WARNING:C:\Users\kpaps\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-16 10:14:47,737:WARNING:C:\Users\kpaps\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-16 10:14:47,741:WARNING:C:\Users\kpaps\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-16 10:14:47,747:WARNING:C:\Users\kpaps\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-16 10:14:47,766:WARNING:C:\Users\kpaps\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-16 10:14:47,771:WARNING:C:\Users\kpaps\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-16 10:14:47,772:WARNING:C:\Users\kpaps\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-16 10:14:47,773:WARNING:C:\Users\kpaps\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-16 10:14:47,777:WARNING:C:\Users\kpaps\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-16 10:14:47,778:WARNING:C:\Users\kpaps\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-16 10:14:47,783:WARNING:C:\Users\kpaps\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-16 10:14:47,783:WARNING:C:\Users\kpaps\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-16 10:14:47,784:WARNING:C:\Users\kpaps\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-16 10:14:47,792:WARNING:C:\Users\kpaps\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-16 10:14:47,812:WARNING:C:\Users\kpaps\anaconda3\Lib\site-packages\sklearn\linear_model\_ridge.py:204: LinAlgWarning: Ill-conditioned matrix (rcond=4.59142e-09): result may not be accurate.
  return linalg.solve(A, Xy, assume_a="pos", overwrite_a=True).T

2024-05-16 10:14:47,814:WARNING:C:\Users\kpaps\anaconda3\Lib\site-packages\sklearn\linear_model\_ridge.py:204: LinAlgWarning: Ill-conditioned matrix (rcond=4.60177e-09): result may not be accurate.
  return linalg.solve(A, Xy, assume_a="pos", overwrite_a=True).T

2024-05-16 10:14:47,836:WARNING:C:\Users\kpaps\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-16 10:14:47,837:WARNING:C:\Users\kpaps\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-16 10:14:47,843:WARNING:C:\Users\kpaps\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-16 10:14:47,843:WARNING:C:\Users\kpaps\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-16 10:14:47,848:WARNING:C:\Users\kpaps\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-16 10:14:47,859:INFO:Calculating mean and std
2024-05-16 10:14:47,862:INFO:Creating metrics dataframe
2024-05-16 10:14:47,865:INFO:Uploading results into container
2024-05-16 10:14:47,867:INFO:Uploading model into container now
2024-05-16 10:14:47,869:INFO:_master_model_container: 6
2024-05-16 10:14:47,869:INFO:_display_container: 2
2024-05-16 10:14:47,870:INFO:RidgeClassifier(alpha=1.0, class_weight=None, copy_X=True, fit_intercept=True,
                max_iter=None, positive=False, random_state=3615, solver='auto',
                tol=0.0001)
2024-05-16 10:14:47,870:INFO:create_model() successfully completed......................................
2024-05-16 10:14:48,453:INFO:SubProcess create_model() end ==================================
2024-05-16 10:14:48,454:INFO:Creating metrics dataframe
2024-05-16 10:14:48,480:INFO:Initializing Random Forest Classifier
2024-05-16 10:14:48,481:INFO:Total runtime is 0.47148137092590325 minutes
2024-05-16 10:14:48,488:INFO:SubProcess create_model() called ==================================
2024-05-16 10:14:48,488:INFO:Initializing create_model()
2024-05-16 10:14:48,490:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000001C246CA6AD0>, estimator=rf, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x000001C2470D7550>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2024-05-16 10:14:48,490:INFO:Checking exceptions
2024-05-16 10:14:48,490:INFO:Importing libraries
2024-05-16 10:14:48,490:INFO:Copying training dataset
2024-05-16 10:14:48,520:INFO:Defining folds
2024-05-16 10:14:48,521:INFO:Declaring metric variables
2024-05-16 10:14:48,538:INFO:Importing untrained model
2024-05-16 10:14:48,551:INFO:Random Forest Classifier Imported successfully
2024-05-16 10:14:48,583:INFO:Starting cross validation
2024-05-16 10:14:48,585:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2024-05-16 10:14:50,391:WARNING:C:\Users\kpaps\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-16 10:14:50,395:WARNING:C:\Users\kpaps\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-16 10:14:50,398:WARNING:C:\Users\kpaps\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-16 10:14:50,402:WARNING:C:\Users\kpaps\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-16 10:14:50,404:WARNING:C:\Users\kpaps\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-16 10:14:50,405:WARNING:C:\Users\kpaps\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-16 10:14:50,408:WARNING:C:\Users\kpaps\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-16 10:14:50,410:WARNING:C:\Users\kpaps\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-16 10:14:50,418:WARNING:C:\Users\kpaps\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-16 10:14:50,485:WARNING:C:\Users\kpaps\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-16 10:14:50,493:WARNING:C:\Users\kpaps\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-16 10:14:50,499:WARNING:C:\Users\kpaps\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-16 10:14:50,507:WARNING:C:\Users\kpaps\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-16 10:14:50,515:WARNING:C:\Users\kpaps\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-16 10:14:50,523:WARNING:C:\Users\kpaps\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-16 10:14:50,532:WARNING:C:\Users\kpaps\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-16 10:14:50,539:WARNING:C:\Users\kpaps\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-16 10:14:50,545:WARNING:C:\Users\kpaps\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-16 10:14:50,585:WARNING:C:\Users\kpaps\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-16 10:14:50,592:WARNING:C:\Users\kpaps\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-16 10:14:50,594:WARNING:C:\Users\kpaps\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-16 10:14:50,599:WARNING:C:\Users\kpaps\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-16 10:14:50,601:WARNING:C:\Users\kpaps\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-16 10:14:50,607:WARNING:C:\Users\kpaps\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-16 10:14:50,911:WARNING:C:\Users\kpaps\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-16 10:14:50,918:WARNING:C:\Users\kpaps\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-16 10:14:50,925:WARNING:C:\Users\kpaps\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-16 10:14:50,967:WARNING:C:\Users\kpaps\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-16 10:14:50,973:WARNING:C:\Users\kpaps\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-16 10:14:50,979:WARNING:C:\Users\kpaps\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-16 10:14:50,990:INFO:Calculating mean and std
2024-05-16 10:14:50,993:INFO:Creating metrics dataframe
2024-05-16 10:14:50,998:INFO:Uploading results into container
2024-05-16 10:14:50,999:INFO:Uploading model into container now
2024-05-16 10:14:51,000:INFO:_master_model_container: 7
2024-05-16 10:14:51,000:INFO:_display_container: 2
2024-05-16 10:14:51,002:INFO:RandomForestClassifier(bootstrap=True, ccp_alpha=0.0, class_weight=None,
                       criterion='gini', max_depth=None, max_features='sqrt',
                       max_leaf_nodes=None, max_samples=None,
                       min_impurity_decrease=0.0, min_samples_leaf=1,
                       min_samples_split=2, min_weight_fraction_leaf=0.0,
                       monotonic_cst=None, n_estimators=100, n_jobs=-1,
                       oob_score=False, random_state=3615, verbose=0,
                       warm_start=False)
2024-05-16 10:14:51,003:INFO:create_model() successfully completed......................................
2024-05-16 10:14:51,583:INFO:SubProcess create_model() end ==================================
2024-05-16 10:14:51,583:INFO:Creating metrics dataframe
2024-05-16 10:14:51,681:INFO:Initializing Quadratic Discriminant Analysis
2024-05-16 10:14:51,681:INFO:Total runtime is 0.5248158852259317 minutes
2024-05-16 10:14:51,693:INFO:SubProcess create_model() called ==================================
2024-05-16 10:14:51,694:INFO:Initializing create_model()
2024-05-16 10:14:51,697:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000001C246CA6AD0>, estimator=qda, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x000001C2470D7550>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2024-05-16 10:14:51,697:INFO:Checking exceptions
2024-05-16 10:14:51,697:INFO:Importing libraries
2024-05-16 10:14:51,697:INFO:Copying training dataset
2024-05-16 10:14:51,714:INFO:Defining folds
2024-05-16 10:14:51,714:INFO:Declaring metric variables
2024-05-16 10:14:51,729:INFO:Importing untrained model
2024-05-16 10:14:51,740:INFO:Quadratic Discriminant Analysis Imported successfully
2024-05-16 10:14:51,763:INFO:Starting cross validation
2024-05-16 10:14:51,767:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2024-05-16 10:14:52,003:WARNING:C:\Users\kpaps\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-16 10:14:52,005:WARNING:C:\Users\kpaps\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-16 10:14:52,010:WARNING:C:\Users\kpaps\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-16 10:14:52,027:WARNING:C:\Users\kpaps\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-16 10:14:52,035:WARNING:C:\Users\kpaps\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-16 10:14:52,055:WARNING:C:\Users\kpaps\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-16 10:14:52,069:WARNING:C:\Users\kpaps\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-16 10:14:52,122:WARNING:C:\Users\kpaps\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-16 10:14:52,126:WARNING:C:\Users\kpaps\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-16 10:14:52,129:WARNING:C:\Users\kpaps\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-16 10:14:52,131:WARNING:C:\Users\kpaps\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-16 10:14:52,203:WARNING:C:\Users\kpaps\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-16 10:14:52,204:WARNING:C:\Users\kpaps\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-16 10:14:52,210:WARNING:C:\Users\kpaps\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-16 10:14:52,213:WARNING:C:\Users\kpaps\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-16 10:14:52,216:WARNING:C:\Users\kpaps\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-16 10:14:52,222:WARNING:C:\Users\kpaps\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-16 10:14:52,223:WARNING:C:\Users\kpaps\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-16 10:14:52,224:WARNING:C:\Users\kpaps\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-16 10:14:52,229:WARNING:C:\Users\kpaps\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-16 10:14:52,234:WARNING:C:\Users\kpaps\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-16 10:14:52,292:WARNING:C:\Users\kpaps\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-16 10:14:52,308:WARNING:C:\Users\kpaps\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-16 10:14:52,359:WARNING:C:\Users\kpaps\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-16 10:14:52,363:WARNING:C:\Users\kpaps\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-16 10:14:52,363:WARNING:C:\Users\kpaps\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-16 10:14:52,369:WARNING:C:\Users\kpaps\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-16 10:14:52,370:WARNING:C:\Users\kpaps\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-16 10:14:52,375:WARNING:C:\Users\kpaps\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-16 10:14:52,387:INFO:Calculating mean and std
2024-05-16 10:14:52,389:INFO:Creating metrics dataframe
2024-05-16 10:14:52,394:INFO:Uploading results into container
2024-05-16 10:14:52,397:INFO:Uploading model into container now
2024-05-16 10:14:52,398:INFO:_master_model_container: 8
2024-05-16 10:14:52,398:INFO:_display_container: 2
2024-05-16 10:14:52,400:INFO:QuadraticDiscriminantAnalysis(priors=None, reg_param=0.0,
                              store_covariance=False, tol=0.0001)
2024-05-16 10:14:52,400:INFO:create_model() successfully completed......................................
2024-05-16 10:14:53,096:INFO:SubProcess create_model() end ==================================
2024-05-16 10:14:53,096:INFO:Creating metrics dataframe
2024-05-16 10:14:53,121:INFO:Initializing Ada Boost Classifier
2024-05-16 10:14:53,121:INFO:Total runtime is 0.548806341489156 minutes
2024-05-16 10:14:53,127:INFO:SubProcess create_model() called ==================================
2024-05-16 10:14:53,128:INFO:Initializing create_model()
2024-05-16 10:14:53,128:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000001C246CA6AD0>, estimator=ada, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x000001C2470D7550>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2024-05-16 10:14:53,128:INFO:Checking exceptions
2024-05-16 10:14:53,128:INFO:Importing libraries
2024-05-16 10:14:53,129:INFO:Copying training dataset
2024-05-16 10:14:53,146:INFO:Defining folds
2024-05-16 10:14:53,146:INFO:Declaring metric variables
2024-05-16 10:14:53,153:INFO:Importing untrained model
2024-05-16 10:14:53,160:INFO:Ada Boost Classifier Imported successfully
2024-05-16 10:14:53,176:INFO:Starting cross validation
2024-05-16 10:14:53,178:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2024-05-16 10:14:53,235:WARNING:C:\Users\kpaps\anaconda3\Lib\site-packages\sklearn\ensemble\_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2024-05-16 10:14:53,239:WARNING:C:\Users\kpaps\anaconda3\Lib\site-packages\sklearn\ensemble\_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2024-05-16 10:14:53,246:WARNING:C:\Users\kpaps\anaconda3\Lib\site-packages\sklearn\ensemble\_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2024-05-16 10:14:53,268:WARNING:C:\Users\kpaps\anaconda3\Lib\site-packages\sklearn\ensemble\_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2024-05-16 10:14:53,273:WARNING:C:\Users\kpaps\anaconda3\Lib\site-packages\sklearn\ensemble\_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2024-05-16 10:14:53,278:WARNING:C:\Users\kpaps\anaconda3\Lib\site-packages\sklearn\ensemble\_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2024-05-16 10:14:53,295:WARNING:C:\Users\kpaps\anaconda3\Lib\site-packages\sklearn\ensemble\_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2024-05-16 10:14:53,307:WARNING:C:\Users\kpaps\anaconda3\Lib\site-packages\sklearn\ensemble\_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2024-05-16 10:14:54,332:WARNING:C:\Users\kpaps\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-16 10:14:54,339:WARNING:C:\Users\kpaps\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-16 10:14:54,346:WARNING:C:\Users\kpaps\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-16 10:14:54,382:WARNING:C:\Users\kpaps\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-16 10:14:54,389:WARNING:C:\Users\kpaps\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-16 10:14:54,393:WARNING:C:\Users\kpaps\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-16 10:14:54,406:WARNING:C:\Users\kpaps\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-16 10:14:54,413:WARNING:C:\Users\kpaps\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-16 10:14:54,420:WARNING:C:\Users\kpaps\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-16 10:14:54,424:WARNING:C:\Users\kpaps\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-16 10:14:54,427:WARNING:C:\Users\kpaps\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-16 10:14:54,431:WARNING:C:\Users\kpaps\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-16 10:14:54,434:WARNING:C:\Users\kpaps\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-16 10:14:54,435:WARNING:C:\Users\kpaps\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-16 10:14:54,440:WARNING:C:\Users\kpaps\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-16 10:14:54,441:WARNING:C:\Users\kpaps\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-16 10:14:54,454:WARNING:C:\Users\kpaps\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-16 10:14:54,455:WARNING:C:\Users\kpaps\anaconda3\Lib\site-packages\sklearn\ensemble\_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2024-05-16 10:14:54,461:WARNING:C:\Users\kpaps\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-16 10:14:54,463:WARNING:C:\Users\kpaps\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-16 10:14:54,468:WARNING:C:\Users\kpaps\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-16 10:14:54,470:WARNING:C:\Users\kpaps\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-16 10:14:54,470:WARNING:C:\Users\kpaps\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-16 10:14:54,477:WARNING:C:\Users\kpaps\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-16 10:14:54,482:WARNING:C:\Users\kpaps\anaconda3\Lib\site-packages\sklearn\ensemble\_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2024-05-16 10:14:54,485:WARNING:C:\Users\kpaps\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-16 10:14:54,966:WARNING:C:\Users\kpaps\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-16 10:14:54,972:WARNING:C:\Users\kpaps\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-16 10:14:55,018:WARNING:C:\Users\kpaps\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-16 10:14:55,121:WARNING:C:\Users\kpaps\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-16 10:14:55,129:WARNING:C:\Users\kpaps\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-16 10:14:55,137:WARNING:C:\Users\kpaps\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-16 10:14:55,147:INFO:Calculating mean and std
2024-05-16 10:14:55,150:INFO:Creating metrics dataframe
2024-05-16 10:14:55,155:INFO:Uploading results into container
2024-05-16 10:14:55,156:INFO:Uploading model into container now
2024-05-16 10:14:55,157:INFO:_master_model_container: 9
2024-05-16 10:14:55,157:INFO:_display_container: 2
2024-05-16 10:14:55,158:INFO:AdaBoostClassifier(algorithm='SAMME.R', estimator=None, learning_rate=1.0,
                   n_estimators=50, random_state=3615)
2024-05-16 10:14:55,158:INFO:create_model() successfully completed......................................
2024-05-16 10:14:55,724:INFO:SubProcess create_model() end ==================================
2024-05-16 10:14:55,724:INFO:Creating metrics dataframe
2024-05-16 10:14:55,746:INFO:Initializing Gradient Boosting Classifier
2024-05-16 10:14:55,747:INFO:Total runtime is 0.5925549268722533 minutes
2024-05-16 10:14:55,753:INFO:SubProcess create_model() called ==================================
2024-05-16 10:14:55,754:INFO:Initializing create_model()
2024-05-16 10:14:55,754:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000001C246CA6AD0>, estimator=gbc, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x000001C2470D7550>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2024-05-16 10:14:55,754:INFO:Checking exceptions
2024-05-16 10:14:55,755:INFO:Importing libraries
2024-05-16 10:14:55,755:INFO:Copying training dataset
2024-05-16 10:14:55,771:INFO:Defining folds
2024-05-16 10:14:55,772:INFO:Declaring metric variables
2024-05-16 10:14:55,782:INFO:Importing untrained model
2024-05-16 10:14:55,792:INFO:Gradient Boosting Classifier Imported successfully
2024-05-16 10:14:55,809:INFO:Starting cross validation
2024-05-16 10:14:55,812:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2024-05-16 10:15:00,403:WARNING:C:\Users\kpaps\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-16 10:15:00,414:WARNING:C:\Users\kpaps\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-16 10:15:00,420:WARNING:C:\Users\kpaps\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-16 10:15:01,016:WARNING:C:\Users\kpaps\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-16 10:15:01,133:WARNING:C:\Users\kpaps\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-16 10:15:01,139:WARNING:C:\Users\kpaps\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-16 10:15:01,145:WARNING:C:\Users\kpaps\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-16 10:15:01,162:WARNING:C:\Users\kpaps\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-16 10:15:01,169:WARNING:C:\Users\kpaps\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-16 10:15:01,175:WARNING:C:\Users\kpaps\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-16 10:15:01,227:WARNING:C:\Users\kpaps\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-16 10:15:01,235:WARNING:C:\Users\kpaps\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-16 10:15:01,466:WARNING:C:\Users\kpaps\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-16 10:15:01,588:WARNING:C:\Users\kpaps\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-16 10:15:01,594:WARNING:C:\Users\kpaps\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-16 10:15:01,599:WARNING:C:\Users\kpaps\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-16 10:15:01,639:WARNING:C:\Users\kpaps\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-16 10:15:01,678:WARNING:C:\Users\kpaps\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-16 10:15:01,687:WARNING:C:\Users\kpaps\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-16 10:15:01,710:WARNING:C:\Users\kpaps\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-16 10:15:01,716:WARNING:C:\Users\kpaps\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-16 10:15:01,868:WARNING:C:\Users\kpaps\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-16 10:15:01,884:WARNING:C:\Users\kpaps\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-16 10:15:01,893:WARNING:C:\Users\kpaps\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-16 10:15:02,823:WARNING:C:\Users\kpaps\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-16 10:15:02,832:WARNING:C:\Users\kpaps\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-16 10:15:02,841:WARNING:C:\Users\kpaps\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-16 10:15:02,944:WARNING:C:\Users\kpaps\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-16 10:15:02,949:WARNING:C:\Users\kpaps\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-16 10:15:02,954:WARNING:C:\Users\kpaps\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-16 10:15:02,963:INFO:Calculating mean and std
2024-05-16 10:15:02,967:INFO:Creating metrics dataframe
2024-05-16 10:15:02,978:INFO:Uploading results into container
2024-05-16 10:15:02,979:INFO:Uploading model into container now
2024-05-16 10:15:02,980:INFO:_master_model_container: 10
2024-05-16 10:15:02,980:INFO:_display_container: 2
2024-05-16 10:15:02,981:INFO:GradientBoostingClassifier(ccp_alpha=0.0, criterion='friedman_mse', init=None,
                           learning_rate=0.1, loss='log_loss', max_depth=3,
                           max_features=None, max_leaf_nodes=None,
                           min_impurity_decrease=0.0, min_samples_leaf=1,
                           min_samples_split=2, min_weight_fraction_leaf=0.0,
                           n_estimators=100, n_iter_no_change=None,
                           random_state=3615, subsample=1.0, tol=0.0001,
                           validation_fraction=0.1, verbose=0,
                           warm_start=False)
2024-05-16 10:15:02,981:INFO:create_model() successfully completed......................................
2024-05-16 10:15:03,666:INFO:SubProcess create_model() end ==================================
2024-05-16 10:15:03,667:INFO:Creating metrics dataframe
2024-05-16 10:15:03,690:INFO:Initializing Linear Discriminant Analysis
2024-05-16 10:15:03,691:INFO:Total runtime is 0.7249735355377196 minutes
2024-05-16 10:15:03,698:INFO:SubProcess create_model() called ==================================
2024-05-16 10:15:03,698:INFO:Initializing create_model()
2024-05-16 10:15:03,699:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000001C246CA6AD0>, estimator=lda, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x000001C2470D7550>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2024-05-16 10:15:03,699:INFO:Checking exceptions
2024-05-16 10:15:03,699:INFO:Importing libraries
2024-05-16 10:15:03,699:INFO:Copying training dataset
2024-05-16 10:15:03,731:INFO:Defining folds
2024-05-16 10:15:03,731:INFO:Declaring metric variables
2024-05-16 10:15:03,739:INFO:Importing untrained model
2024-05-16 10:15:03,751:INFO:Linear Discriminant Analysis Imported successfully
2024-05-16 10:15:03,777:INFO:Starting cross validation
2024-05-16 10:15:03,786:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2024-05-16 10:15:04,047:WARNING:C:\Users\kpaps\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-16 10:15:04,053:WARNING:C:\Users\kpaps\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-16 10:15:04,061:WARNING:C:\Users\kpaps\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-16 10:15:04,083:WARNING:C:\Users\kpaps\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-16 10:15:04,089:WARNING:C:\Users\kpaps\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-16 10:15:04,095:WARNING:C:\Users\kpaps\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-16 10:15:04,128:WARNING:C:\Users\kpaps\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-16 10:15:04,135:WARNING:C:\Users\kpaps\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-16 10:15:04,181:WARNING:C:\Users\kpaps\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-16 10:15:04,187:WARNING:C:\Users\kpaps\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-16 10:15:04,210:WARNING:C:\Users\kpaps\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-16 10:15:04,217:WARNING:C:\Users\kpaps\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-16 10:15:04,225:WARNING:C:\Users\kpaps\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-16 10:15:04,239:WARNING:C:\Users\kpaps\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-16 10:15:04,239:WARNING:C:\Users\kpaps\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-16 10:15:04,242:WARNING:C:\Users\kpaps\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-16 10:15:04,244:WARNING:C:\Users\kpaps\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-16 10:15:04,245:WARNING:C:\Users\kpaps\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-16 10:15:04,248:WARNING:C:\Users\kpaps\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-16 10:15:04,278:WARNING:C:\Users\kpaps\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-16 10:15:04,283:WARNING:C:\Users\kpaps\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-16 10:15:04,340:WARNING:C:\Users\kpaps\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-16 10:15:04,397:WARNING:C:\Users\kpaps\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-16 10:15:04,403:WARNING:C:\Users\kpaps\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-16 10:15:04,411:WARNING:C:\Users\kpaps\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-16 10:15:04,418:WARNING:C:\Users\kpaps\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-16 10:15:04,424:WARNING:C:\Users\kpaps\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-16 10:15:04,441:WARNING:C:\Users\kpaps\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-16 10:15:04,445:WARNING:C:\Users\kpaps\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-16 10:15:04,450:WARNING:C:\Users\kpaps\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-16 10:15:04,460:INFO:Calculating mean and std
2024-05-16 10:15:04,463:INFO:Creating metrics dataframe
2024-05-16 10:15:04,468:INFO:Uploading results into container
2024-05-16 10:15:04,472:INFO:Uploading model into container now
2024-05-16 10:15:04,473:INFO:_master_model_container: 11
2024-05-16 10:15:04,474:INFO:_display_container: 2
2024-05-16 10:15:04,475:INFO:LinearDiscriminantAnalysis(covariance_estimator=None, n_components=None,
                           priors=None, shrinkage=None, solver='svd',
                           store_covariance=False, tol=0.0001)
2024-05-16 10:15:04,475:INFO:create_model() successfully completed......................................
2024-05-16 10:15:05,019:INFO:SubProcess create_model() end ==================================
2024-05-16 10:15:05,019:INFO:Creating metrics dataframe
2024-05-16 10:15:05,042:INFO:Initializing Extra Trees Classifier
2024-05-16 10:15:05,043:INFO:Total runtime is 0.7475168108940123 minutes
2024-05-16 10:15:05,052:INFO:SubProcess create_model() called ==================================
2024-05-16 10:15:05,056:INFO:Initializing create_model()
2024-05-16 10:15:05,056:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000001C246CA6AD0>, estimator=et, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x000001C2470D7550>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2024-05-16 10:15:05,057:INFO:Checking exceptions
2024-05-16 10:15:05,057:INFO:Importing libraries
2024-05-16 10:15:05,057:INFO:Copying training dataset
2024-05-16 10:15:05,100:INFO:Defining folds
2024-05-16 10:15:05,100:INFO:Declaring metric variables
2024-05-16 10:15:05,111:INFO:Importing untrained model
2024-05-16 10:15:05,122:INFO:Extra Trees Classifier Imported successfully
2024-05-16 10:15:05,143:INFO:Starting cross validation
2024-05-16 10:15:05,144:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2024-05-16 10:15:07,174:WARNING:C:\Users\kpaps\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-16 10:15:07,180:WARNING:C:\Users\kpaps\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-16 10:15:07,194:WARNING:C:\Users\kpaps\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-16 10:15:07,200:WARNING:C:\Users\kpaps\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-16 10:15:07,205:WARNING:C:\Users\kpaps\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-16 10:15:07,228:WARNING:C:\Users\kpaps\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-16 10:15:07,281:WARNING:C:\Users\kpaps\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-16 10:15:07,287:WARNING:C:\Users\kpaps\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-16 10:15:07,292:WARNING:C:\Users\kpaps\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-16 10:15:07,378:WARNING:C:\Users\kpaps\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-16 10:15:07,387:WARNING:C:\Users\kpaps\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-16 10:15:07,394:WARNING:C:\Users\kpaps\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-16 10:15:07,438:WARNING:C:\Users\kpaps\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-16 10:15:07,444:WARNING:C:\Users\kpaps\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-16 10:15:07,449:WARNING:C:\Users\kpaps\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-16 10:15:07,473:WARNING:C:\Users\kpaps\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-16 10:15:07,478:WARNING:C:\Users\kpaps\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-16 10:15:07,484:WARNING:C:\Users\kpaps\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-16 10:15:07,534:WARNING:C:\Users\kpaps\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-16 10:15:07,539:WARNING:C:\Users\kpaps\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-16 10:15:07,545:WARNING:C:\Users\kpaps\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-16 10:15:07,681:WARNING:C:\Users\kpaps\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-16 10:15:07,688:WARNING:C:\Users\kpaps\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-16 10:15:07,695:WARNING:C:\Users\kpaps\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-16 10:15:07,952:WARNING:C:\Users\kpaps\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-16 10:15:07,960:WARNING:C:\Users\kpaps\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-16 10:15:07,965:WARNING:C:\Users\kpaps\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-16 10:15:08,001:WARNING:C:\Users\kpaps\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-16 10:15:08,007:WARNING:C:\Users\kpaps\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-16 10:15:08,013:WARNING:C:\Users\kpaps\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-16 10:15:08,025:INFO:Calculating mean and std
2024-05-16 10:15:08,028:INFO:Creating metrics dataframe
2024-05-16 10:15:08,033:INFO:Uploading results into container
2024-05-16 10:15:08,034:INFO:Uploading model into container now
2024-05-16 10:15:08,035:INFO:_master_model_container: 12
2024-05-16 10:15:08,035:INFO:_display_container: 2
2024-05-16 10:15:08,037:INFO:ExtraTreesClassifier(bootstrap=False, ccp_alpha=0.0, class_weight=None,
                     criterion='gini', max_depth=None, max_features='sqrt',
                     max_leaf_nodes=None, max_samples=None,
                     min_impurity_decrease=0.0, min_samples_leaf=1,
                     min_samples_split=2, min_weight_fraction_leaf=0.0,
                     monotonic_cst=None, n_estimators=100, n_jobs=-1,
                     oob_score=False, random_state=3615, verbose=0,
                     warm_start=False)
2024-05-16 10:15:08,038:INFO:create_model() successfully completed......................................
2024-05-16 10:15:08,554:INFO:SubProcess create_model() end ==================================
2024-05-16 10:15:08,554:INFO:Creating metrics dataframe
2024-05-16 10:15:08,577:INFO:Initializing Extreme Gradient Boosting
2024-05-16 10:15:08,578:INFO:Total runtime is 0.8064160068829853 minutes
2024-05-16 10:15:08,599:INFO:SubProcess create_model() called ==================================
2024-05-16 10:15:08,601:INFO:Initializing create_model()
2024-05-16 10:15:08,602:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000001C246CA6AD0>, estimator=xgboost, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x000001C2470D7550>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2024-05-16 10:15:08,602:INFO:Checking exceptions
2024-05-16 10:15:08,602:INFO:Importing libraries
2024-05-16 10:15:08,603:INFO:Copying training dataset
2024-05-16 10:15:08,646:INFO:Defining folds
2024-05-16 10:15:08,646:INFO:Declaring metric variables
2024-05-16 10:15:08,656:INFO:Importing untrained model
2024-05-16 10:15:08,666:INFO:Extreme Gradient Boosting Imported successfully
2024-05-16 10:15:08,685:INFO:Starting cross validation
2024-05-16 10:15:08,688:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2024-05-16 10:15:09,925:WARNING:C:\Users\kpaps\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-16 10:15:09,949:WARNING:C:\Users\kpaps\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-16 10:15:09,964:WARNING:C:\Users\kpaps\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-16 10:15:09,969:WARNING:C:\Users\kpaps\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-16 10:15:09,976:WARNING:C:\Users\kpaps\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-16 10:15:09,987:WARNING:C:\Users\kpaps\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-16 10:15:09,993:WARNING:C:\Users\kpaps\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-16 10:15:09,999:WARNING:C:\Users\kpaps\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-16 10:15:10,009:WARNING:C:\Users\kpaps\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-16 10:15:10,074:WARNING:C:\Users\kpaps\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-16 10:15:10,122:WARNING:C:\Users\kpaps\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-16 10:15:10,133:WARNING:C:\Users\kpaps\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-16 10:15:10,153:WARNING:C:\Users\kpaps\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-16 10:15:10,154:WARNING:C:\Users\kpaps\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-16 10:15:10,187:WARNING:C:\Users\kpaps\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-16 10:15:10,309:WARNING:C:\Users\kpaps\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-16 10:15:10,326:WARNING:C:\Users\kpaps\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-16 10:15:10,341:WARNING:C:\Users\kpaps\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-16 10:15:10,342:WARNING:C:\Users\kpaps\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-16 10:15:10,343:WARNING:C:\Users\kpaps\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-16 10:15:10,353:WARNING:C:\Users\kpaps\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-16 10:15:10,359:WARNING:C:\Users\kpaps\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-16 10:15:10,419:WARNING:C:\Users\kpaps\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-16 10:15:10,425:WARNING:C:\Users\kpaps\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-16 10:15:10,486:WARNING:C:\Users\kpaps\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-16 10:15:10,493:WARNING:C:\Users\kpaps\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-16 10:15:10,498:WARNING:C:\Users\kpaps\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-16 10:15:10,508:WARNING:C:\Users\kpaps\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-16 10:15:10,514:WARNING:C:\Users\kpaps\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-16 10:15:10,520:WARNING:C:\Users\kpaps\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-16 10:15:10,531:INFO:Calculating mean and std
2024-05-16 10:15:10,533:INFO:Creating metrics dataframe
2024-05-16 10:15:10,537:INFO:Uploading results into container
2024-05-16 10:15:10,539:INFO:Uploading model into container now
2024-05-16 10:15:10,540:INFO:_master_model_container: 13
2024-05-16 10:15:10,541:INFO:_display_container: 2
2024-05-16 10:15:10,542:INFO:XGBClassifier(base_score=None, booster='gbtree', callbacks=None,
              colsample_bylevel=None, colsample_bynode=None,
              colsample_bytree=None, device='cpu', early_stopping_rounds=None,
              enable_categorical=False, eval_metric=None, feature_types=None,
              gamma=None, grow_policy=None, importance_type=None,
              interaction_constraints=None, learning_rate=None, max_bin=None,
              max_cat_threshold=None, max_cat_to_onehot=None,
              max_delta_step=None, max_depth=None, max_leaves=None,
              min_child_weight=None, missing=nan, monotone_constraints=None,
              multi_strategy=None, n_estimators=None, n_jobs=-1,
              num_parallel_tree=None, objective='binary:logistic', ...)
2024-05-16 10:15:10,542:INFO:create_model() successfully completed......................................
2024-05-16 10:15:11,036:INFO:SubProcess create_model() end ==================================
2024-05-16 10:15:11,037:INFO:Creating metrics dataframe
2024-05-16 10:15:11,060:INFO:Initializing Light Gradient Boosting Machine
2024-05-16 10:15:11,060:INFO:Total runtime is 0.8478012800216673 minutes
2024-05-16 10:15:11,067:INFO:SubProcess create_model() called ==================================
2024-05-16 10:15:11,070:INFO:Initializing create_model()
2024-05-16 10:15:11,070:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000001C246CA6AD0>, estimator=lightgbm, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x000001C2470D7550>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2024-05-16 10:15:11,071:INFO:Checking exceptions
2024-05-16 10:15:11,071:INFO:Importing libraries
2024-05-16 10:15:11,071:INFO:Copying training dataset
2024-05-16 10:15:11,090:INFO:Defining folds
2024-05-16 10:15:11,092:INFO:Declaring metric variables
2024-05-16 10:15:11,103:INFO:Importing untrained model
2024-05-16 10:15:11,112:INFO:Light Gradient Boosting Machine Imported successfully
2024-05-16 10:15:11,126:INFO:Starting cross validation
2024-05-16 10:15:11,127:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2024-05-16 10:15:15,225:WARNING:C:\Users\kpaps\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-16 10:15:15,230:WARNING:C:\Users\kpaps\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-16 10:15:15,237:WARNING:C:\Users\kpaps\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-16 10:15:15,408:WARNING:C:\Users\kpaps\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-16 10:15:15,414:WARNING:C:\Users\kpaps\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-16 10:15:15,420:WARNING:C:\Users\kpaps\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-16 10:15:15,484:WARNING:C:\Users\kpaps\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-16 10:15:15,492:WARNING:C:\Users\kpaps\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-16 10:15:15,497:WARNING:C:\Users\kpaps\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-16 10:15:15,692:WARNING:C:\Users\kpaps\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-16 10:15:15,698:WARNING:C:\Users\kpaps\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-16 10:15:15,703:WARNING:C:\Users\kpaps\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-16 10:15:15,727:WARNING:C:\Users\kpaps\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-16 10:15:15,736:WARNING:C:\Users\kpaps\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-16 10:15:15,740:WARNING:C:\Users\kpaps\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-16 10:15:15,745:WARNING:C:\Users\kpaps\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-16 10:15:15,754:WARNING:C:\Users\kpaps\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-16 10:15:15,762:WARNING:C:\Users\kpaps\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-16 10:15:16,143:WARNING:C:\Users\kpaps\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-16 10:15:16,148:WARNING:C:\Users\kpaps\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-16 10:15:16,155:WARNING:C:\Users\kpaps\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-16 10:15:16,294:WARNING:C:\Users\kpaps\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-16 10:15:16,299:WARNING:C:\Users\kpaps\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-16 10:15:16,305:WARNING:C:\Users\kpaps\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-16 10:15:16,984:WARNING:C:\Users\kpaps\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-16 10:15:16,989:WARNING:C:\Users\kpaps\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-16 10:15:16,994:WARNING:C:\Users\kpaps\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-16 10:15:17,019:WARNING:C:\Users\kpaps\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-16 10:15:17,025:WARNING:C:\Users\kpaps\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-16 10:15:17,031:WARNING:C:\Users\kpaps\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-16 10:15:17,041:INFO:Calculating mean and std
2024-05-16 10:15:17,064:INFO:Creating metrics dataframe
2024-05-16 10:15:17,069:INFO:Uploading results into container
2024-05-16 10:15:17,071:INFO:Uploading model into container now
2024-05-16 10:15:17,072:INFO:_master_model_container: 14
2024-05-16 10:15:17,072:INFO:_display_container: 2
2024-05-16 10:15:17,073:INFO:LGBMClassifier(boosting_type='gbdt', class_weight=None, colsample_bytree=1.0,
               importance_type='split', learning_rate=0.1, max_depth=-1,
               min_child_samples=20, min_child_weight=0.001, min_split_gain=0.0,
               n_estimators=100, n_jobs=-1, num_leaves=31, objective=None,
               random_state=3615, reg_alpha=0.0, reg_lambda=0.0, subsample=1.0,
               subsample_for_bin=200000, subsample_freq=0)
2024-05-16 10:15:17,073:INFO:create_model() successfully completed......................................
2024-05-16 10:15:17,608:INFO:SubProcess create_model() end ==================================
2024-05-16 10:15:17,608:INFO:Creating metrics dataframe
2024-05-16 10:15:17,628:INFO:Initializing Dummy Classifier
2024-05-16 10:15:17,629:INFO:Total runtime is 0.9572858929634093 minutes
2024-05-16 10:15:17,635:INFO:SubProcess create_model() called ==================================
2024-05-16 10:15:17,636:INFO:Initializing create_model()
2024-05-16 10:15:17,636:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000001C246CA6AD0>, estimator=dummy, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x000001C2470D7550>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2024-05-16 10:15:17,636:INFO:Checking exceptions
2024-05-16 10:15:17,636:INFO:Importing libraries
2024-05-16 10:15:17,636:INFO:Copying training dataset
2024-05-16 10:15:17,652:INFO:Defining folds
2024-05-16 10:15:17,652:INFO:Declaring metric variables
2024-05-16 10:15:17,667:INFO:Importing untrained model
2024-05-16 10:15:17,680:INFO:Dummy Classifier Imported successfully
2024-05-16 10:15:17,697:INFO:Starting cross validation
2024-05-16 10:15:17,699:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2024-05-16 10:15:17,785:WARNING:C:\Users\kpaps\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-16 10:15:17,792:WARNING:C:\Users\kpaps\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-16 10:15:17,795:WARNING:C:\Users\kpaps\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2024-05-16 10:15:17,822:WARNING:C:\Users\kpaps\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-16 10:15:17,844:WARNING:C:\Users\kpaps\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-16 10:15:17,875:WARNING:C:\Users\kpaps\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-16 10:15:17,881:WARNING:C:\Users\kpaps\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-16 10:15:17,884:WARNING:C:\Users\kpaps\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2024-05-16 10:15:17,887:WARNING:C:\Users\kpaps\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-16 10:15:17,923:WARNING:C:\Users\kpaps\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-16 10:15:17,929:WARNING:C:\Users\kpaps\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-16 10:15:17,932:WARNING:C:\Users\kpaps\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2024-05-16 10:15:17,937:WARNING:C:\Users\kpaps\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-16 10:15:17,951:WARNING:C:\Users\kpaps\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-16 10:15:17,957:WARNING:C:\Users\kpaps\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-16 10:15:17,959:WARNING:C:\Users\kpaps\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2024-05-16 10:15:17,965:WARNING:C:\Users\kpaps\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-16 10:15:17,985:WARNING:C:\Users\kpaps\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-16 10:15:17,990:WARNING:C:\Users\kpaps\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-16 10:15:18,013:WARNING:C:\Users\kpaps\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-16 10:15:18,018:WARNING:C:\Users\kpaps\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-16 10:15:18,021:WARNING:C:\Users\kpaps\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2024-05-16 10:15:18,024:WARNING:C:\Users\kpaps\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-16 10:15:18,041:WARNING:C:\Users\kpaps\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-16 10:15:18,044:WARNING:C:\Users\kpaps\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2024-05-16 10:15:18,048:WARNING:C:\Users\kpaps\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-16 10:15:18,066:WARNING:C:\Users\kpaps\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-16 10:15:18,072:WARNING:C:\Users\kpaps\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-16 10:15:18,075:WARNING:C:\Users\kpaps\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2024-05-16 10:15:18,079:WARNING:C:\Users\kpaps\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-16 10:15:18,083:WARNING:C:\Users\kpaps\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2024-05-16 10:15:18,090:WARNING:C:\Users\kpaps\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-16 10:15:18,091:WARNING:C:\Users\kpaps\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-16 10:15:18,099:WARNING:C:\Users\kpaps\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-16 10:15:18,103:WARNING:C:\Users\kpaps\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2024-05-16 10:15:18,107:WARNING:C:\Users\kpaps\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-16 10:15:18,136:WARNING:C:\Users\kpaps\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-16 10:15:18,140:WARNING:C:\Users\kpaps\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-16 10:15:18,143:WARNING:C:\Users\kpaps\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2024-05-16 10:15:18,146:WARNING:C:\Users\kpaps\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-16 10:15:18,157:INFO:Calculating mean and std
2024-05-16 10:15:18,159:INFO:Creating metrics dataframe
2024-05-16 10:15:18,163:INFO:Uploading results into container
2024-05-16 10:15:18,164:INFO:Uploading model into container now
2024-05-16 10:15:18,165:INFO:_master_model_container: 15
2024-05-16 10:15:18,166:INFO:_display_container: 2
2024-05-16 10:15:18,167:INFO:DummyClassifier(constant=None, random_state=3615, strategy='prior')
2024-05-16 10:15:18,167:INFO:create_model() successfully completed......................................
2024-05-16 10:15:18,789:INFO:SubProcess create_model() end ==================================
2024-05-16 10:15:18,789:INFO:Creating metrics dataframe
2024-05-16 10:15:18,830:INFO:Initializing create_model()
2024-05-16 10:15:18,831:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000001C246CA6AD0>, estimator=AdaBoostClassifier(algorithm='SAMME.R', estimator=None, learning_rate=1.0,
                   n_estimators=50, random_state=3615), fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=False, predict=False, fit_kwargs={}, groups=None, refit=True, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=None, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2024-05-16 10:15:18,831:INFO:Checking exceptions
2024-05-16 10:15:18,835:INFO:Importing libraries
2024-05-16 10:15:18,835:INFO:Copying training dataset
2024-05-16 10:15:18,850:INFO:Defining folds
2024-05-16 10:15:18,851:INFO:Declaring metric variables
2024-05-16 10:15:18,851:INFO:Importing untrained model
2024-05-16 10:15:18,851:INFO:Declaring custom model
2024-05-16 10:15:18,852:INFO:Ada Boost Classifier Imported successfully
2024-05-16 10:15:18,853:INFO:Cross validation set to False
2024-05-16 10:15:18,854:INFO:Fitting Model
2024-05-16 10:15:19,252:INFO:AdaBoostClassifier(algorithm='SAMME.R', estimator=None, learning_rate=1.0,
                   n_estimators=50, random_state=3615)
2024-05-16 10:15:19,252:INFO:create_model() successfully completed......................................
2024-05-16 10:15:19,946:INFO:_master_model_container: 15
2024-05-16 10:15:19,946:INFO:_display_container: 2
2024-05-16 10:15:19,947:INFO:AdaBoostClassifier(algorithm='SAMME.R', estimator=None, learning_rate=1.0,
                   n_estimators=50, random_state=3615)
2024-05-16 10:15:19,947:INFO:compare_models() successfully completed......................................
2024-05-16 10:22:41,113:INFO:Initializing create_model()
2024-05-16 10:22:41,114:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000001C246CA6AD0>, estimator=ada, fold=None, round=4, cross_validation=True, predict=True, fit_kwargs=None, groups=None, refit=True, probability_threshold=None, experiment_custom_tags=None, verbose=True, system=True, add_to_model_list=True, metrics=None, display=None, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2024-05-16 10:22:41,114:INFO:Checking exceptions
2024-05-16 10:22:41,170:INFO:Importing libraries
2024-05-16 10:22:41,170:INFO:Copying training dataset
2024-05-16 10:22:41,185:INFO:Defining folds
2024-05-16 10:22:41,185:INFO:Declaring metric variables
2024-05-16 10:22:41,196:INFO:Importing untrained model
2024-05-16 10:22:41,207:INFO:Ada Boost Classifier Imported successfully
2024-05-16 10:22:41,235:INFO:Starting cross validation
2024-05-16 10:22:41,240:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2024-05-16 10:22:56,934:WARNING:C:\Users\kpaps\anaconda3\Lib\site-packages\sklearn\ensemble\_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2024-05-16 10:22:59,136:WARNING:C:\Users\kpaps\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-16 10:22:59,152:WARNING:C:\Users\kpaps\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-16 10:22:59,158:WARNING:C:\Users\kpaps\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-16 10:22:59,488:WARNING:C:\Users\kpaps\anaconda3\Lib\site-packages\sklearn\ensemble\_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2024-05-16 10:22:59,531:WARNING:C:\Users\kpaps\anaconda3\Lib\site-packages\sklearn\ensemble\_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2024-05-16 10:22:59,705:WARNING:C:\Users\kpaps\anaconda3\Lib\site-packages\sklearn\ensemble\_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2024-05-16 10:22:59,711:WARNING:C:\Users\kpaps\anaconda3\Lib\site-packages\sklearn\ensemble\_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2024-05-16 10:22:59,991:WARNING:C:\Users\kpaps\anaconda3\Lib\site-packages\sklearn\ensemble\_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2024-05-16 10:23:00,093:WARNING:C:\Users\kpaps\anaconda3\Lib\site-packages\sklearn\ensemble\_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2024-05-16 10:23:00,145:WARNING:C:\Users\kpaps\anaconda3\Lib\site-packages\sklearn\ensemble\_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2024-05-16 10:23:00,624:WARNING:C:\Users\kpaps\anaconda3\Lib\site-packages\sklearn\ensemble\_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2024-05-16 10:23:01,366:WARNING:C:\Users\kpaps\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-16 10:23:01,392:WARNING:C:\Users\kpaps\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-16 10:23:01,408:WARNING:C:\Users\kpaps\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-16 10:23:01,589:WARNING:C:\Users\kpaps\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-16 10:23:01,596:WARNING:C:\Users\kpaps\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-16 10:23:01,610:WARNING:C:\Users\kpaps\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-16 10:23:01,616:WARNING:C:\Users\kpaps\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-16 10:23:01,673:WARNING:C:\Users\kpaps\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-16 10:23:01,683:WARNING:C:\Users\kpaps\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-16 10:23:01,706:WARNING:C:\Users\kpaps\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-16 10:23:01,711:WARNING:C:\Users\kpaps\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-16 10:23:01,723:WARNING:C:\Users\kpaps\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-16 10:23:01,729:WARNING:C:\Users\kpaps\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-16 10:23:01,735:WARNING:C:\Users\kpaps\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-16 10:23:01,803:WARNING:C:\Users\kpaps\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-16 10:23:01,809:WARNING:C:\Users\kpaps\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-16 10:23:01,827:WARNING:C:\Users\kpaps\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-16 10:23:01,852:WARNING:C:\Users\kpaps\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-16 10:23:02,005:WARNING:C:\Users\kpaps\anaconda3\Lib\site-packages\sklearn\ensemble\_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2024-05-16 10:23:02,142:WARNING:C:\Users\kpaps\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-16 10:23:02,265:WARNING:C:\Users\kpaps\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-16 10:23:02,292:WARNING:C:\Users\kpaps\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-16 10:23:02,473:WARNING:C:\Users\kpaps\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-16 10:23:02,481:WARNING:C:\Users\kpaps\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-16 10:23:02,487:WARNING:C:\Users\kpaps\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-16 10:23:02,658:WARNING:C:\Users\kpaps\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-16 10:23:02,664:WARNING:C:\Users\kpaps\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-16 10:23:02,668:WARNING:C:\Users\kpaps\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-16 10:23:02,678:INFO:Calculating mean and std
2024-05-16 10:23:02,681:INFO:Creating metrics dataframe
2024-05-16 10:23:02,701:INFO:Finalizing model
2024-05-16 10:23:03,066:INFO:Uploading results into container
2024-05-16 10:23:03,069:INFO:Uploading model into container now
2024-05-16 10:23:03,094:INFO:_master_model_container: 16
2024-05-16 10:23:03,101:INFO:_display_container: 3
2024-05-16 10:23:03,108:INFO:AdaBoostClassifier(algorithm='SAMME.R', estimator=None, learning_rate=1.0,
                   n_estimators=50, random_state=3615)
2024-05-16 10:23:03,108:INFO:create_model() successfully completed......................................
2024-05-16 10:24:21,799:INFO:Initializing tune_model()
2024-05-16 10:24:21,799:INFO:tune_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000001C246CA6AD0>, estimator=ada, fold=None, round=4, n_iter=10, custom_grid=None, optimize=Accuracy, custom_scorer=None, search_library=scikit-learn, search_algorithm=None, early_stopping=False, early_stopping_max_iters=10, choose_better=True, fit_kwargs=None, groups=None, return_tuner=False, verbose=True, tuner_verbose=True, return_train_score=False, kwargs={})
2024-05-16 10:24:21,800:INFO:Checking exceptions
2024-05-16 10:24:45,885:INFO:Initializing tune_model()
2024-05-16 10:24:45,886:INFO:tune_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000001C246CA6AD0>, estimator=AdaBoostClassifier(algorithm='SAMME.R', estimator=None, learning_rate=1.0,
                   n_estimators=50, random_state=3615), fold=None, round=4, n_iter=10, custom_grid=None, optimize=Accuracy, custom_scorer=None, search_library=scikit-learn, search_algorithm=None, early_stopping=False, early_stopping_max_iters=10, choose_better=True, fit_kwargs=None, groups=None, return_tuner=False, verbose=True, tuner_verbose=True, return_train_score=False, kwargs={})
2024-05-16 10:24:45,886:INFO:Checking exceptions
2024-05-16 10:24:45,928:INFO:Copying training dataset
2024-05-16 10:24:45,948:INFO:Checking base model
2024-05-16 10:24:45,949:INFO:Base model : Ada Boost Classifier
2024-05-16 10:24:45,967:INFO:Declaring metric variables
2024-05-16 10:24:45,977:INFO:Defining Hyperparameters
2024-05-16 10:24:46,764:INFO:Tuning with n_jobs=-1
2024-05-16 10:24:46,764:INFO:Initializing RandomizedSearchCV
2024-05-16 10:25:37,430:INFO:best_params: {'actual_estimator__n_estimators': 250, 'actual_estimator__learning_rate': 0.2, 'actual_estimator__algorithm': 'SAMME'}
2024-05-16 10:25:37,432:INFO:Hyperparameter search completed
2024-05-16 10:25:37,432:INFO:SubProcess create_model() called ==================================
2024-05-16 10:25:37,433:INFO:Initializing create_model()
2024-05-16 10:25:37,433:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000001C246CA6AD0>, estimator=AdaBoostClassifier(algorithm='SAMME.R', estimator=None, learning_rate=1.0,
                   n_estimators=50, random_state=3615), fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=True, probability_threshold=None, experiment_custom_tags=None, verbose=True, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x000001C246DCD110>, model_only=True, return_train_score=False, error_score=0.0, kwargs={'n_estimators': 250, 'learning_rate': 0.2, 'algorithm': 'SAMME'})
2024-05-16 10:25:37,433:INFO:Checking exceptions
2024-05-16 10:25:37,433:INFO:Importing libraries
2024-05-16 10:25:37,433:INFO:Copying training dataset
2024-05-16 10:25:37,451:INFO:Defining folds
2024-05-16 10:25:37,451:INFO:Declaring metric variables
2024-05-16 10:25:37,458:INFO:Importing untrained model
2024-05-16 10:25:37,460:INFO:Declaring custom model
2024-05-16 10:25:37,477:INFO:Ada Boost Classifier Imported successfully
2024-05-16 10:25:37,513:INFO:Starting cross validation
2024-05-16 10:25:37,514:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2024-05-16 10:25:44,506:WARNING:C:\Users\kpaps\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-16 10:25:44,512:WARNING:C:\Users\kpaps\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-16 10:25:44,517:WARNING:C:\Users\kpaps\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-16 10:25:44,674:WARNING:C:\Users\kpaps\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-16 10:25:44,680:WARNING:C:\Users\kpaps\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-16 10:25:44,704:WARNING:C:\Users\kpaps\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-16 10:25:44,710:WARNING:C:\Users\kpaps\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-16 10:25:44,716:WARNING:C:\Users\kpaps\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-16 10:25:44,729:WARNING:C:\Users\kpaps\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-16 10:25:44,988:WARNING:C:\Users\kpaps\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-16 10:25:45,003:WARNING:C:\Users\kpaps\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-16 10:25:45,010:WARNING:C:\Users\kpaps\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-16 10:25:45,011:WARNING:C:\Users\kpaps\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-16 10:25:45,017:WARNING:C:\Users\kpaps\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-16 10:25:45,024:WARNING:C:\Users\kpaps\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-16 10:25:45,062:WARNING:C:\Users\kpaps\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-16 10:25:45,068:WARNING:C:\Users\kpaps\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-16 10:25:45,082:WARNING:C:\Users\kpaps\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-16 10:25:45,104:WARNING:C:\Users\kpaps\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-16 10:25:45,110:WARNING:C:\Users\kpaps\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-16 10:25:45,116:WARNING:C:\Users\kpaps\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-16 10:25:45,229:WARNING:C:\Users\kpaps\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-16 10:25:45,236:WARNING:C:\Users\kpaps\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-16 10:25:45,243:WARNING:C:\Users\kpaps\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-16 10:25:47,215:WARNING:C:\Users\kpaps\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-16 10:25:47,223:WARNING:C:\Users\kpaps\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-16 10:25:47,230:WARNING:C:\Users\kpaps\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-16 10:25:47,331:WARNING:C:\Users\kpaps\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-16 10:25:47,339:WARNING:C:\Users\kpaps\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-16 10:25:47,348:WARNING:C:\Users\kpaps\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-16 10:25:47,365:INFO:Calculating mean and std
2024-05-16 10:25:47,367:INFO:Creating metrics dataframe
2024-05-16 10:25:47,380:INFO:Finalizing model
2024-05-16 10:25:49,544:INFO:Uploading results into container
2024-05-16 10:25:49,545:INFO:Uploading model into container now
2024-05-16 10:25:49,546:INFO:_master_model_container: 17
2024-05-16 10:25:49,546:INFO:_display_container: 4
2024-05-16 10:25:49,547:INFO:AdaBoostClassifier(algorithm='SAMME', estimator=None, learning_rate=0.2,
                   n_estimators=250, random_state=3615)
2024-05-16 10:25:49,547:INFO:create_model() successfully completed......................................
2024-05-16 10:25:50,187:INFO:SubProcess create_model() end ==================================
2024-05-16 10:25:50,188:INFO:choose_better activated
2024-05-16 10:25:50,199:INFO:SubProcess create_model() called ==================================
2024-05-16 10:25:50,202:INFO:Initializing create_model()
2024-05-16 10:25:50,202:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000001C246CA6AD0>, estimator=AdaBoostClassifier(algorithm='SAMME.R', estimator=None, learning_rate=1.0,
                   n_estimators=50, random_state=3615), fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=True, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=None, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2024-05-16 10:25:50,203:INFO:Checking exceptions
2024-05-16 10:25:50,217:INFO:Importing libraries
2024-05-16 10:25:50,217:INFO:Copying training dataset
2024-05-16 10:25:50,237:INFO:Defining folds
2024-05-16 10:25:50,239:INFO:Declaring metric variables
2024-05-16 10:25:50,240:INFO:Importing untrained model
2024-05-16 10:25:50,240:INFO:Declaring custom model
2024-05-16 10:25:50,241:INFO:Ada Boost Classifier Imported successfully
2024-05-16 10:25:50,241:INFO:Starting cross validation
2024-05-16 10:25:50,243:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2024-05-16 10:25:50,306:WARNING:C:\Users\kpaps\anaconda3\Lib\site-packages\sklearn\ensemble\_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2024-05-16 10:25:50,345:WARNING:C:\Users\kpaps\anaconda3\Lib\site-packages\sklearn\ensemble\_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2024-05-16 10:25:50,387:WARNING:C:\Users\kpaps\anaconda3\Lib\site-packages\sklearn\ensemble\_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2024-05-16 10:25:50,403:WARNING:C:\Users\kpaps\anaconda3\Lib\site-packages\sklearn\ensemble\_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2024-05-16 10:25:50,444:WARNING:C:\Users\kpaps\anaconda3\Lib\site-packages\sklearn\ensemble\_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2024-05-16 10:25:50,531:WARNING:C:\Users\kpaps\anaconda3\Lib\site-packages\sklearn\ensemble\_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2024-05-16 10:25:50,609:WARNING:C:\Users\kpaps\anaconda3\Lib\site-packages\sklearn\ensemble\_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2024-05-16 10:25:50,746:WARNING:C:\Users\kpaps\anaconda3\Lib\site-packages\sklearn\ensemble\_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2024-05-16 10:25:52,315:WARNING:C:\Users\kpaps\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-16 10:25:52,322:WARNING:C:\Users\kpaps\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-16 10:25:52,328:WARNING:C:\Users\kpaps\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-16 10:25:52,356:WARNING:C:\Users\kpaps\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-16 10:25:52,366:WARNING:C:\Users\kpaps\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-16 10:25:52,371:WARNING:C:\Users\kpaps\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-16 10:25:52,410:WARNING:C:\Users\kpaps\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-16 10:25:52,416:WARNING:C:\Users\kpaps\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-16 10:25:52,422:WARNING:C:\Users\kpaps\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-16 10:25:52,435:WARNING:C:\Users\kpaps\anaconda3\Lib\site-packages\sklearn\ensemble\_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2024-05-16 10:25:52,462:WARNING:C:\Users\kpaps\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-16 10:25:52,467:WARNING:C:\Users\kpaps\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-16 10:25:52,473:WARNING:C:\Users\kpaps\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-16 10:25:52,509:WARNING:C:\Users\kpaps\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-16 10:25:52,515:WARNING:C:\Users\kpaps\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-16 10:25:52,520:WARNING:C:\Users\kpaps\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-16 10:25:52,551:WARNING:C:\Users\kpaps\anaconda3\Lib\site-packages\sklearn\ensemble\_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2024-05-16 10:25:52,594:WARNING:C:\Users\kpaps\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-16 10:25:52,600:WARNING:C:\Users\kpaps\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-16 10:25:52,606:WARNING:C:\Users\kpaps\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-16 10:25:52,629:WARNING:C:\Users\kpaps\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-16 10:25:52,636:WARNING:C:\Users\kpaps\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-16 10:25:52,643:WARNING:C:\Users\kpaps\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-16 10:25:52,690:WARNING:C:\Users\kpaps\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-16 10:25:52,695:WARNING:C:\Users\kpaps\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-16 10:25:52,708:WARNING:C:\Users\kpaps\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-16 10:25:53,087:WARNING:C:\Users\kpaps\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-16 10:25:53,111:WARNING:C:\Users\kpaps\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-16 10:25:53,115:WARNING:C:\Users\kpaps\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-16 10:25:53,118:WARNING:C:\Users\kpaps\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-16 10:25:53,123:WARNING:C:\Users\kpaps\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-16 10:25:53,124:WARNING:C:\Users\kpaps\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-16 10:25:53,136:INFO:Calculating mean and std
2024-05-16 10:25:53,137:INFO:Creating metrics dataframe
2024-05-16 10:25:53,141:INFO:Finalizing model
2024-05-16 10:25:53,539:INFO:Uploading results into container
2024-05-16 10:25:53,540:INFO:Uploading model into container now
2024-05-16 10:25:53,542:INFO:_master_model_container: 18
2024-05-16 10:25:53,542:INFO:_display_container: 5
2024-05-16 10:25:53,542:INFO:AdaBoostClassifier(algorithm='SAMME.R', estimator=None, learning_rate=1.0,
                   n_estimators=50, random_state=3615)
2024-05-16 10:25:53,542:INFO:create_model() successfully completed......................................
2024-05-16 10:25:54,205:INFO:SubProcess create_model() end ==================================
2024-05-16 10:25:54,206:INFO:AdaBoostClassifier(algorithm='SAMME.R', estimator=None, learning_rate=1.0,
                   n_estimators=50, random_state=3615) result for Accuracy is 0.9648
2024-05-16 10:25:54,206:INFO:AdaBoostClassifier(algorithm='SAMME', estimator=None, learning_rate=0.2,
                   n_estimators=250, random_state=3615) result for Accuracy is 0.9572
2024-05-16 10:25:54,207:INFO:AdaBoostClassifier(algorithm='SAMME.R', estimator=None, learning_rate=1.0,
                   n_estimators=50, random_state=3615) is best model
2024-05-16 10:25:54,207:INFO:choose_better completed
2024-05-16 10:25:54,208:INFO:Original model was better than the tuned model, hence it will be returned. NOTE: The display metrics are for the tuned model (not the original one).
2024-05-16 10:25:54,231:INFO:_master_model_container: 18
2024-05-16 10:25:54,241:INFO:_display_container: 4
2024-05-16 10:25:54,248:INFO:AdaBoostClassifier(algorithm='SAMME.R', estimator=None, learning_rate=1.0,
                   n_estimators=50, random_state=3615)
2024-05-16 10:25:54,249:INFO:tune_model() successfully completed......................................
2024-05-16 10:27:14,996:INFO:Initializing evaluate_model()
2024-05-16 10:27:14,996:INFO:evaluate_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000001C246CA6AD0>, estimator=AdaBoostClassifier(algorithm='SAMME.R', estimator=None, learning_rate=1.0,
                   n_estimators=50, random_state=3615), fold=None, fit_kwargs=None, plot_kwargs=None, feature_name=None, groups=None)
2024-05-16 10:27:15,041:INFO:Initializing plot_model()
2024-05-16 10:27:15,042:INFO:plot_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000001C246CA6AD0>, estimator=AdaBoostClassifier(algorithm='SAMME.R', estimator=None, learning_rate=1.0,
                   n_estimators=50, random_state=3615), plot=pipeline, scale=1, save=False, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), fit_kwargs={}, plot_kwargs=None, groups=None, feature_name=None, label=False, verbose=False, system=True, display=None, display_format=None)
2024-05-16 10:27:15,042:INFO:Checking exceptions
2024-05-16 10:27:15,062:INFO:Preloading libraries
2024-05-16 10:27:15,073:INFO:Copying training dataset
2024-05-16 10:27:15,074:INFO:Plot type: pipeline
2024-05-16 10:27:15,559:INFO:Visual Rendered Successfully
2024-05-16 10:27:16,302:INFO:plot_model() successfully completed......................................
2024-05-16 10:28:56,859:INFO:Initializing evaluate_model()
2024-05-16 10:28:56,860:INFO:evaluate_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000001C246CA6AD0>, estimator=AdaBoostClassifier(algorithm='SAMME.R', estimator=None, learning_rate=1.0,
                   n_estimators=50, random_state=3615), fold=None, fit_kwargs=None, plot_kwargs=None, feature_name=None, groups=None)
2024-05-16 10:28:56,905:INFO:Initializing plot_model()
2024-05-16 10:28:56,905:INFO:plot_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000001C246CA6AD0>, estimator=AdaBoostClassifier(algorithm='SAMME.R', estimator=None, learning_rate=1.0,
                   n_estimators=50, random_state=3615), plot=pipeline, scale=1, save=False, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), fit_kwargs={}, plot_kwargs=None, groups=None, feature_name=None, label=False, verbose=False, system=True, display=None, display_format=None)
2024-05-16 10:28:56,906:INFO:Checking exceptions
2024-05-16 10:28:56,926:INFO:Preloading libraries
2024-05-16 10:28:56,974:INFO:Copying training dataset
2024-05-16 10:28:56,974:INFO:Plot type: pipeline
2024-05-16 10:28:57,293:INFO:Visual Rendered Successfully
2024-05-16 10:28:58,024:INFO:plot_model() successfully completed......................................
2024-05-16 10:32:40,034:INFO:Initializing evaluate_model()
2024-05-16 10:32:40,035:INFO:evaluate_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000001C246CA6AD0>, estimator=AdaBoostClassifier(algorithm='SAMME.R', estimator=None, learning_rate=1.0,
                   n_estimators=50, random_state=3615), fold=None, fit_kwargs=None, plot_kwargs=None, feature_name=None, groups=None)
2024-05-16 10:32:40,062:INFO:Initializing plot_model()
2024-05-16 10:32:40,062:INFO:plot_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000001C246CA6AD0>, estimator=AdaBoostClassifier(algorithm='SAMME.R', estimator=None, learning_rate=1.0,
                   n_estimators=50, random_state=3615), plot=pipeline, scale=1, save=False, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), fit_kwargs={}, plot_kwargs=None, groups=None, feature_name=None, label=False, verbose=False, system=True, display=None, display_format=None)
2024-05-16 10:32:40,062:INFO:Checking exceptions
2024-05-16 10:32:40,072:INFO:Preloading libraries
2024-05-16 10:32:40,081:INFO:Copying training dataset
2024-05-16 10:32:40,081:INFO:Plot type: pipeline
2024-05-16 10:32:40,539:INFO:Visual Rendered Successfully
2024-05-16 10:32:41,153:INFO:plot_model() successfully completed......................................
